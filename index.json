{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Raa Labs Edge framework API reference | DocFX Material",
    "keywords": "Raa Labs Edge framework API reference The Raa Labs Edge Framework is a fundamental part of RaaEdge, containing shared components of applications within the RaaEdge solution. The framework is aimed at simplifiying the creation of edge modules and applications within the Raa Labs ecosystem. This documentation is aimed at developers within Raa Labs working on edge modules."
  },
  "api/RaaLabs.Edge.Application.html": {
    "href": "api/RaaLabs.Edge.Application.html",
    "title": "Class Application | DocFX Material",
    "keywords": "Class Application The class responsible for running all the application handlers and tasks. Inheritance System.Object Application Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public class Application : object Constructors | Improve this Doc View Source Application(IContainer, List<Type>) Declaration public Application(IContainer container, List<Type> handlers) Parameters Type Name Description IContainer container List < Type > handlers Properties | Improve this Doc View Source Container The underlying autofac container for the application Declaration public IContainer Container { get; } Property Value Type Description IContainer | Improve this Doc View Source RuntimeScope The runtime scope for the application Declaration public ILifetimeScope RuntimeScope { get; } Property Value Type Description ILifetimeScope Methods | Improve this Doc View Source BuildRuntimeScope() Declaration public ILifetimeScope BuildRuntimeScope() Returns Type Description ILifetimeScope | Improve this Doc View Source Run() Start the application. This will instantiate all handlers and tasks. Declaration public Task Run() Returns Type Description Task | Improve this Doc View Source Startup() Declaration public void Startup()"
  },
  "api/RaaLabs.Edge.ApplicationBuilder.html": {
    "href": "api/RaaLabs.Edge.ApplicationBuilder.html",
    "title": "Class ApplicationBuilder | DocFX Material",
    "keywords": "Class ApplicationBuilder Builder class for the application. Inheritance System.Object ApplicationBuilder TestApplicationBuilder Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public class ApplicationBuilder : object Constructors | Improve this Doc View Source ApplicationBuilder() Declaration public ApplicationBuilder() Fields | Improve this Doc View Source _assemblies Declaration protected readonly ISet<Assembly> _assemblies Field Value Type Description ISet < Assembly > | Improve this Doc View Source _builder Declaration protected readonly ContainerBuilder _builder Field Value Type Description ContainerBuilder | Improve this Doc View Source _handlers Declaration protected readonly List<Type> _handlers Field Value Type Description List < Type > Methods | Improve this Doc View Source Build() Build the application. Declaration public virtual Application Build() Returns Type Description Application The application containing all tasks and handlers to start up | Improve this Doc View Source WithAllImplementationsOf<I>() Declaration public ApplicationBuilder WithAllImplementationsOf<I>() where I : class Returns Type Description ApplicationBuilder Type Parameters Name Description I the interface to search for implementations of. Note that the interaface and the implementation should exist within the same assembly. | Improve this Doc View Source WithAssembly(Assembly) Manually register an assembly used by the application. Declaration public ApplicationBuilder WithAssembly(Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description ApplicationBuilder | Improve this Doc View Source WithHandler<THandler>() Register a handler for the application. The application will make sure that the handler is instantiated when the application's Run() function is called Declaration public ApplicationBuilder WithHandler<THandler>() Returns Type Description ApplicationBuilder Type Parameters Name Description THandler The handler to register | Improve this Doc View Source WithManualRegistration(Action<ContainerBuilder>) An escape hatch function to access the Autofac container builder directly through a lambda function. Shouldn't be required to use too often, but provided here just in case. Declaration public ApplicationBuilder WithManualRegistration(Action<ContainerBuilder> registration) Parameters Type Name Description Action < ContainerBuilder > registration Returns Type Description ApplicationBuilder | Improve this Doc View Source WithModule<TModule>() Register an Autofac module for the application. Declaration public ApplicationBuilder WithModule<TModule>() where TModule : Autofac.Core.IModule, new() Returns Type Description ApplicationBuilder Type Parameters Name Description TModule The module to register | Improve this Doc View Source WithSerializerDeserializer<T>(Type[]) Registration method for both serializers and deserializers. The function will register the class as itself and all its implemented ISerializer and IDeserializer types. If the receiver parameter is set, it will be used as the name of the receiver for the serializer/deserializer. Declaration public ApplicationBuilder WithSerializerDeserializer<T>(params Type[] receivers) Parameters Type Name Description Type [] receivers Returns Type Description ApplicationBuilder Type Parameters Name Description T The type to serialize or deserialize | Improve this Doc View Source WithSingletonType<T>() Register a singleton class for the runtime. Declaration public ApplicationBuilder WithSingletonType<T>() Returns Type Description ApplicationBuilder Type Parameters Name Description T The class to register | Improve this Doc View Source WithSingletonType<T, I>() Register a singleton class for the runtime. Declaration public ApplicationBuilder WithSingletonType<T, I>() where T : I Returns Type Description ApplicationBuilder Type Parameters Name Description T The class to register I The interface to register as | Improve this Doc View Source WithTask<Task>() Register a task for the application. The application will make sure that the task is executed when the application's Run() function is called. Declaration public ApplicationBuilder WithTask<Task>() where Task : IRunAsync Returns Type Description ApplicationBuilder Type Parameters Name Description Task The | Improve this Doc View Source WithType<T>() Register a single type for the application. This should not be required to do anymore, because the builder already register the AnyConcreteTypeNotAlreadyRegisteredSource source. Declaration public ApplicationBuilder WithType<T>() Returns Type Description ApplicationBuilder Type Parameters Name Description T The type to register Extension Methods ApplicationBuilderExtensions.WithMqttBroker<T>(ApplicationBuilder)"
  },
  "api/RaaLabs.Edge.AutofacExtensions.html": {
    "href": "api/RaaLabs.Edge.AutofacExtensions.html",
    "title": "Class AutofacExtensions | DocFX Material",
    "keywords": "Class AutofacExtensions Inheritance System.Object AutofacExtensions Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public static class AutofacExtensions : object Methods | Improve this Doc View Source InstancePerRuntime<TLimit, TActivatorData, TRegistrationStyle>(IRegistrationBuilder<TLimit, TActivatorData, TRegistrationStyle>) Declaration public static IRegistrationBuilder<TLimit, TActivatorData, TRegistrationStyle> InstancePerRuntime<TLimit, TActivatorData, TRegistrationStyle>(this IRegistrationBuilder<TLimit, TActivatorData, TRegistrationStyle> builder) Parameters Type Name Description IRegistrationBuilder <TLimit, TActivatorData, TRegistrationStyle> builder Returns Type Description IRegistrationBuilder <TLimit, TActivatorData, TRegistrationStyle> Type Parameters Name Description TLimit TActivatorData TRegistrationStyle | Improve this Doc View Source RegisterTask<TImplementer>(ContainerBuilder) Declaration public static IRegistrationBuilder<TImplementer, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterTask<TImplementer>(this ContainerBuilder builder) where TImplementer : IRunAsync Parameters Type Name Description ContainerBuilder builder Returns Type Description IRegistrationBuilder <TImplementer, ConcreteReflectionActivatorData , SingleRegistrationStyle > Type Parameters Name Description TImplementer | Improve this Doc View Source ResolveDeserializer<T>(ILifetimeScope) Declaration public static IDeserializer<T> ResolveDeserializer<T>(this ILifetimeScope scope) Parameters Type Name Description ILifetimeScope scope Returns Type Description IDeserializer <T> Type Parameters Name Description T | Improve this Doc View Source ResolveDeserializer<T>(ILifetimeScope, Type) Declaration public static IDeserializer<T> ResolveDeserializer<T>(this ILifetimeScope scope, Type receiver) Parameters Type Name Description ILifetimeScope scope Type receiver Returns Type Description IDeserializer <T> Type Parameters Name Description T The type to deserialize | Improve this Doc View Source ResolveDeserializer<T, R>(ILifetimeScope) Declaration public static IDeserializer<T> ResolveDeserializer<T, R>(this ILifetimeScope scope) Parameters Type Name Description ILifetimeScope scope Returns Type Description IDeserializer <T> Type Parameters Name Description T The type to deserialize R The receiver for the deserializer | Improve this Doc View Source ResolveSerializer<T>(ILifetimeScope) Declaration public static ISerializer<T> ResolveSerializer<T>(this ILifetimeScope scope) Parameters Type Name Description ILifetimeScope scope Returns Type Description ISerializer <T> Type Parameters Name Description T | Improve this Doc View Source ResolveSerializer<T>(ILifetimeScope, Type) Declaration public static ISerializer<T> ResolveSerializer<T>(this ILifetimeScope scope, Type receiver) Parameters Type Name Description ILifetimeScope scope Type receiver Returns Type Description ISerializer <T> Type Parameters Name Description T | Improve this Doc View Source ResolveSerializer<T, R>(ILifetimeScope) Declaration public static ISerializer<T> ResolveSerializer<T, R>(this ILifetimeScope scope) Parameters Type Name Description ILifetimeScope scope Returns Type Description ISerializer <T> Type Parameters Name Description T R"
  },
  "api/RaaLabs.Edge.html": {
    "href": "api/RaaLabs.Edge.html",
    "title": "Namespace RaaLabs.Edge | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge Classes Application The class responsible for running all the application handlers and tasks. ApplicationBuilder Builder class for the application. AutofacExtensions TaskHelpers Interfaces IAllProducedEventsVerifier<T> Interface for a class able to verify all events of type T from a SpecFlow table. IBootloader Represents a class that should run before the application starts. Usually, a bootloading class will implement one or more of the following interfaces, each defining functions to be run at different stages of the boot process for the current scope: IPreRegistrationStage IRegistrationStage IPostRegistrationStage The Status property tells the bootloading process what the status for the bootloader is. IEventInstanceFactory<T> Interface for a class able to construct an instance of type T from a SpecFlow table row IPostRegistrationStage A bootloader that needs to do something to the current scope. This can be instantiating components, etc. IPreRegistrationStage A bootloader that needs to do something to the previous scope. This can be resolving components, etc. IProducedEventVerifier<T> Interface for a class able to verify an event of type T from a SpecFlow table row. IRegistrationStage A bootloader that needs to modify the in some way. This is usually registering new components to the application. IRunAsync Interface for tasks which should start to run in parallel when application starts. Enums Status The bootloader status."
  },
  "api/RaaLabs.Edge.IAllProducedEventsVerifier-1.html": {
    "href": "api/RaaLabs.Edge.IAllProducedEventsVerifier-1.html",
    "title": "Interface IAllProducedEventsVerifier<T> | DocFX Material",
    "keywords": "Interface IAllProducedEventsVerifier<T> Interface for a class able to verify all events of type T from a SpecFlow table. Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.Testing.dll Syntax public interface IAllProducedEventsVerifier<T> Type Parameters Name Description T Methods | Improve this Doc View Source VerifyFromTable(IList<T>, Table) Verify all events from a SpecFlow table Declaration void VerifyFromTable(IList<T> events, Table table) Parameters Type Name Description IList <T> events The events to verify Table table The SpecFlow table"
  },
  "api/RaaLabs.Edge.IBootloader.html": {
    "href": "api/RaaLabs.Edge.IBootloader.html",
    "title": "Interface IBootloader | DocFX Material",
    "keywords": "Interface IBootloader Represents a class that should run before the application starts. Usually, a bootloading class will implement one or more of the following interfaces, each defining functions to be run at different stages of the boot process for the current scope: IPreRegistrationStage IRegistrationStage IPostRegistrationStage The Status property tells the bootloading process what the status for the bootloader is. Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public interface IBootloader Properties | Improve this Doc View Source Status The bootloader status. Declaration Status Status { get; } Property Value Type Description Status"
  },
  "api/RaaLabs.Edge.IEventInstanceFactory-1.html": {
    "href": "api/RaaLabs.Edge.IEventInstanceFactory-1.html",
    "title": "Interface IEventInstanceFactory<T> | DocFX Material",
    "keywords": "Interface IEventInstanceFactory<T> Interface for a class able to construct an instance of type T from a SpecFlow table row Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.Testing.dll Syntax public interface IEventInstanceFactory<T> Type Parameters Name Description T Methods | Improve this Doc View Source FromTableRow(TableRow) Function to create an instance of type T from a SpecFlow table row Declaration T FromTableRow(TableRow row) Parameters Type Name Description TableRow row The SpecFlow table row Returns Type Description T an instance of type T"
  },
  "api/RaaLabs.Edge.IPostRegistrationStage.html": {
    "href": "api/RaaLabs.Edge.IPostRegistrationStage.html",
    "title": "Interface IPostRegistrationStage | DocFX Material",
    "keywords": "Interface IPostRegistrationStage A bootloader that needs to do something to the current scope. This can be instantiating components, etc. Inherited Members IBootloader.Status Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public interface IPostRegistrationStage : IBootloader Methods | Improve this Doc View Source PostRegistration(ILifetimeScope) Function that will be run after the scope has been built. Declaration void PostRegistration(ILifetimeScope newScope) Parameters Type Name Description ILifetimeScope newScope"
  },
  "api/RaaLabs.Edge.IPreRegistrationStage.html": {
    "href": "api/RaaLabs.Edge.IPreRegistrationStage.html",
    "title": "Interface IPreRegistrationStage | DocFX Material",
    "keywords": "Interface IPreRegistrationStage A bootloader that needs to do something to the previous scope. This can be resolving components, etc. Inherited Members IBootloader.Status Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public interface IPreRegistrationStage : IBootloader Methods | Improve this Doc View Source PreRegistration(ILifetimeScope) Function that will be run before a new scope is built. Declaration void PreRegistration(ILifetimeScope oldScope) Parameters Type Name Description ILifetimeScope oldScope"
  },
  "api/RaaLabs.Edge.IProducedEventVerifier-1.html": {
    "href": "api/RaaLabs.Edge.IProducedEventVerifier-1.html",
    "title": "Interface IProducedEventVerifier<T> | DocFX Material",
    "keywords": "Interface IProducedEventVerifier<T> Interface for a class able to verify an event of type T from a SpecFlow table row. Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.Testing.dll Syntax public interface IProducedEventVerifier<T> Type Parameters Name Description T Methods | Improve this Doc View Source VerifyFromTableRow(T, TableRow) Verify an event from a SpecFlow table row Declaration void VerifyFromTableRow(T event, TableRow row) Parameters Type Name Description T event The event to verify TableRow row The SpecFlow table row"
  },
  "api/RaaLabs.Edge.IRegistrationStage.html": {
    "href": "api/RaaLabs.Edge.IRegistrationStage.html",
    "title": "Interface IRegistrationStage | DocFX Material",
    "keywords": "Interface IRegistrationStage A bootloader that needs to modify the in some way. This is usually registering new components to the application. Inherited Members IBootloader.Status Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public interface IRegistrationStage : IBootloader Methods | Improve this Doc View Source RegistrationStage(ContainerBuilder) Function that will be run to build a new scope Declaration void RegistrationStage(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.IRunAsync.html": {
    "href": "api/RaaLabs.Edge.IRunAsync.html",
    "title": "Interface IRunAsync | DocFX Material",
    "keywords": "Interface IRunAsync Interface for tasks which should start to run in parallel when application starts. Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public interface IRunAsync Methods | Improve this Doc View Source Run() This function will run on application start. Classes implementing this interface should make this function async: public async Task Run() { ... } Declaration Task Run() Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.Configuration.ApplicationShutdownTrigger.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.ApplicationShutdownTrigger.html",
    "title": "Class ApplicationShutdownTrigger | DocFX Material",
    "keywords": "Class ApplicationShutdownTrigger A \"power-off button\" for the application Inheritance System.Object ApplicationShutdownTrigger Implements IApplicationShutdownTrigger Namespace : RaaLabs.Edge.Modules.Configuration Assembly : RaaLabs.Edge.Modules.Configuration.dll Syntax public class ApplicationShutdownTrigger : object, IApplicationShutdownTrigger Methods | Improve this Doc View Source ShutdownApplication() Will shut down the application Declaration public void ShutdownApplication() Implements IApplicationShutdownTrigger"
  },
  "api/RaaLabs.Edge.Modules.Configuration.Configuration.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.Configuration.html",
    "title": "Class Configuration | DocFX Material",
    "keywords": "Class Configuration An Autofac module providing the application with a registration source for resolving all classes implementing the IConfiguration interface. Inheritance System.Object Configuration Namespace : RaaLabs.Edge.Modules.Configuration Assembly : RaaLabs.Edge.Modules.Configuration.dll Syntax public class Configuration : Autofac.Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.Configuration.ConfigurationFileFinder.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.ConfigurationFileFinder.html",
    "title": "Class ConfigurationFileFinder | DocFX Material",
    "keywords": "Class ConfigurationFileFinder Inheritance System.Object ConfigurationFileFinder Namespace : RaaLabs.Edge.Modules.Configuration Assembly : RaaLabs.Edge.Modules.Configuration.dll Syntax public static class ConfigurationFileFinder : object Methods | Improve this Doc View Source FindConfigurationFilePath(IFileSystem, String, ILogger) Declaration public static string FindConfigurationFilePath(IFileSystem fs, string filename, ILogger logger) Parameters Type Name Description IFileSystem fs System.String filename ILogger logger Returns Type Description System.String"
  },
  "api/RaaLabs.Edge.Modules.Configuration.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.html",
    "title": "Namespace RaaLabs.Edge.Modules.Configuration | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.Configuration Classes ApplicationShutdownTrigger A \"power-off button\" for the application Configuration An Autofac module providing the application with a registration source for resolving all classes implementing the IConfiguration interface. ConfigurationFileFinder NameAttribute An attribute for naming the configuration file to load into the type. RestartOnChangeAttribute An attribute for naming the configuration file to load into the type. Interfaces IApplicationShutdownTrigger IConfiguration An interface marking the type as a configuration type."
  },
  "api/RaaLabs.Edge.Modules.Configuration.IApplicationShutdownTrigger.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.IApplicationShutdownTrigger.html",
    "title": "Interface IApplicationShutdownTrigger | DocFX Material",
    "keywords": "Interface IApplicationShutdownTrigger Namespace : RaaLabs.Edge.Modules.Configuration Assembly : RaaLabs.Edge.Modules.Configuration.dll Syntax public interface IApplicationShutdownTrigger Methods | Improve this Doc View Source ShutdownApplication() Declaration void ShutdownApplication()"
  },
  "api/RaaLabs.Edge.Modules.Configuration.IConfiguration.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.IConfiguration.html",
    "title": "Interface IConfiguration | DocFX Material",
    "keywords": "Interface IConfiguration An interface marking the type as a configuration type. Namespace : RaaLabs.Edge.Modules.Configuration Assembly : RaaLabs.Edge.Modules.Configuration.dll Syntax public interface IConfiguration"
  },
  "api/RaaLabs.Edge.Modules.Configuration.NameAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.NameAttribute.html",
    "title": "Class NameAttribute | DocFX Material",
    "keywords": "Class NameAttribute An attribute for naming the configuration file to load into the type. Inheritance System.Object NameAttribute Namespace : RaaLabs.Edge.Modules.Configuration Assembly : RaaLabs.Edge.Modules.Configuration.dll Syntax public class NameAttribute : Attribute Constructors | Improve this Doc View Source NameAttribute(String) Declaration public NameAttribute(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "api/RaaLabs.Edge.Modules.Configuration.RestartOnChangeAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.Configuration.RestartOnChangeAttribute.html",
    "title": "Class RestartOnChangeAttribute | DocFX Material",
    "keywords": "Class RestartOnChangeAttribute An attribute for naming the configuration file to load into the type. Inheritance System.Object RestartOnChangeAttribute Namespace : RaaLabs.Edge.Modules.Configuration Assembly : RaaLabs.Edge.Modules.Configuration.dll Syntax public class RestartOnChangeAttribute : Attribute Constructors | Improve this Doc View Source RestartOnChangeAttribute() Declaration public RestartOnChangeAttribute()"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.EdgeHub.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.EdgeHub.html",
    "title": "Class EdgeHub | DocFX Material",
    "keywords": "Class EdgeHub The module for registering the EdgeHub bridge for the application. Inheritance System.Object EdgeHub Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class EdgeHub : Autofac.Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.EdgeHubBridge.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.EdgeHubBridge.html",
    "title": "Class EdgeHubBridge | DocFX Material",
    "keywords": "Class EdgeHubBridge Class responsible for bridging events to and from EdgeHub clients Inheritance System.Object EdgeHubBridge Implements IBridgeIncomingEvent < IEdgeHubIncomingEvent > IProduceEvent < IEdgeHubIncomingEvent > IProduceEvent IBridgeOutgoingEvent < IEdgeHubOutgoingEvent > IBridge IConsumeEvent < IEdgeHubOutgoingEvent > IConsumeEvent Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class EdgeHubBridge : object, IBridgeIncomingEvent<IEdgeHubIncomingEvent>, IProduceEvent<IEdgeHubIncomingEvent>, IProduceEvent, IBridgeOutgoingEvent<IEdgeHubOutgoingEvent>, IBridge, IConsumeEvent<IEdgeHubOutgoingEvent>, IConsumeEvent Constructors | Improve this Doc View Source EdgeHubBridge(IEdgeHubMessageConverter, IIotModuleClient, IEventHandler<IEdgeHubIncomingEvent>) Declaration public EdgeHubBridge(IEdgeHubMessageConverter messageConverter, IIotModuleClient client, IEventHandler<IEdgeHubIncomingEvent> incomingHandler) Parameters Type Name Description IEdgeHubMessageConverter messageConverter IIotModuleClient client IEventHandler < IEdgeHubIncomingEvent > incomingHandler Methods | Improve this Doc View Source Handle(IEdgeHubOutgoingEvent) Declaration public void Handle(IEdgeHubOutgoingEvent event) Parameters Type Name Description IEdgeHubOutgoingEvent event | Improve this Doc View Source SetupBridge() Declaration public Task SetupBridge() Returns Type Description Task Events | Improve this Doc View Source EdgeHubEventReceived Declaration public event EventEmitter<IEdgeHubIncomingEvent> EdgeHubEventReceived Event Type Type Description EventEmitter < IEdgeHubIncomingEvent > Implements IBridgeIncomingEvent<T> IProduceEvent<T> IProduceEvent IBridgeOutgoingEvent<T> IBridge IConsumeEvent<T> IConsumeEvent"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.EdgeHubMessageConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.EdgeHubMessageConverter.html",
    "title": "Class EdgeHubMessageConverter | DocFX Material",
    "keywords": "Class EdgeHubMessageConverter Converts an event to an EdgeHub message, and vice versa. Inheritance System.Object EdgeHubMessageConverter Implements IEdgeHubMessageConverter Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class EdgeHubMessageConverter : object, IEdgeHubMessageConverter Constructors | Improve this Doc View Source EdgeHubMessageConverter(ILifetimeScope, IEventHandler<IEdgeHubIncomingEvent>, IEventHandler<IEdgeHubOutgoingEvent>) Declaration public EdgeHubMessageConverter(ILifetimeScope scope, IEventHandler<IEdgeHubIncomingEvent> incomingHandler, IEventHandler<IEdgeHubOutgoingEvent> outgoingHandler) Parameters Type Name Description ILifetimeScope scope IEventHandler < IEdgeHubIncomingEvent > incomingHandler IEventHandler < IEdgeHubOutgoingEvent > outgoingHandler Methods | Improve this Doc View Source ToEvent(String, Message) Convert an EdgeHub message to an event. Declaration public IEvent ToEvent(string inputName, Message message) Parameters Type Name Description System.String inputName The input that received the message Message message The message to convert Returns Type Description IEvent the IotHub message converted to an event | Improve this Doc View Source ToMessage(IEvent) Convert an event to an EdgeHub message. Declaration public (string outputName, Message message)? ToMessage(IEvent event) Parameters Type Name Description IEvent event The event to convert Returns Type Description System.Nullable < System.ValueTuple < System.String , Message >> a tuple consisting of the output to send to, and the event converted to a message Implements IEdgeHubMessageConverter"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.html",
    "title": "Namespace RaaLabs.Edge.Modules.EdgeHub | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.EdgeHub Classes EdgeHub The module for registering the EdgeHub bridge for the application. EdgeHubBridge Class responsible for bridging events to and from EdgeHub clients EdgeHubMessageConverter Converts an event to an EdgeHub message, and vice versa. InputNameAttribute Attribute for the EdgeHub input name. All classes implementing IEdgeHubIncomingEvent should use this annotation. IotEdgeHelpers IotModuleClient An IotModuleClient with an actual underlying EdgeHub ModuleClient. NullIotModuleClient A mocked IotModuleClient, used when there is no edgeHub running on the system. Will be used during testing. OutputNameAttribute Attribute for the EdgeHub output name. All classes implementing IEdgeHubOutgoingEvent should use this annotation. Interfaces IEdgeHubIncomingEvent Marker interface for incoming EdgeHub events. By implementing this interface for a class, The EdgeHub module will set up a subscription to the EdgeHub input with the name given in the InputName attribute for the class. The class will be used for deserializing the incoming event. IEdgeHubMessageConverter IEdgeHubOutgoingEvent Marker interface for outgoing EdgeHub events. By implementing this interface for a class, The EdgeHub module will subscribe to this event, and send out the event to EdgeHub output with the name given in the OutputName attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event. IIotModuleClient"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.IEdgeHubIncomingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.IEdgeHubIncomingEvent.html",
    "title": "Interface IEdgeHubIncomingEvent | DocFX Material",
    "keywords": "Interface IEdgeHubIncomingEvent Marker interface for incoming EdgeHub events. By implementing this interface for a class, The EdgeHub module will set up a subscription to the EdgeHub input with the name given in the InputName attribute for the class. The class will be used for deserializing the incoming event. Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public interface IEdgeHubIncomingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.IEdgeHubMessageConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.IEdgeHubMessageConverter.html",
    "title": "Interface IEdgeHubMessageConverter | DocFX Material",
    "keywords": "Interface IEdgeHubMessageConverter Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public interface IEdgeHubMessageConverter Methods | Improve this Doc View Source ToEvent(String, Message) Declaration IEvent ToEvent(string inputName, Message message) Parameters Type Name Description System.String inputName Message message Returns Type Description IEvent | Improve this Doc View Source ToMessage(IEvent) Declaration (string outputName, Message message)? ToMessage(IEvent event) Parameters Type Name Description IEvent event Returns Type Description System.Nullable < System.ValueTuple < System.String , Message >>"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.IEdgeHubOutgoingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.IEdgeHubOutgoingEvent.html",
    "title": "Interface IEdgeHubOutgoingEvent | DocFX Material",
    "keywords": "Interface IEdgeHubOutgoingEvent Marker interface for outgoing EdgeHub events. By implementing this interface for a class, The EdgeHub module will subscribe to this event, and send out the event to EdgeHub output with the name given in the OutputName attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event. Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public interface IEdgeHubOutgoingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.IIotModuleClient.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.IIotModuleClient.html",
    "title": "Interface IIotModuleClient | DocFX Material",
    "keywords": "Interface IIotModuleClient Inherited Members ISubscribingReceiverClient<(String inputName, Message message), String>.Subscribe(String) IReceiverClient<(String inputName, Message message)>.OnDataReceived ISenderClient<(String outputName, Message message)>.SendAsync(ValueTuple<String, Message>) IClient.Connect() Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public interface IIotModuleClient : ISubscribingReceiverClient<(string inputName, Message message), string>, IReceiverClient<(string inputName, Message message)>, ISenderClient<(string outputName, Message message)>, IClient"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.InputNameAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.InputNameAttribute.html",
    "title": "Class InputNameAttribute | DocFX Material",
    "keywords": "Class InputNameAttribute Attribute for the EdgeHub input name. All classes implementing IEdgeHubIncomingEvent should use this annotation. Inheritance System.Object InputNameAttribute Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class InputNameAttribute : Attribute Constructors | Improve this Doc View Source InputNameAttribute(String) Declaration public InputNameAttribute(string inputName) Parameters Type Name Description System.String inputName Properties | Improve this Doc View Source InputName Declaration public string InputName { get; } Property Value Type Description System.String"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.IotEdgeHelpers.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.IotEdgeHelpers.html",
    "title": "Class IotEdgeHelpers | DocFX Material",
    "keywords": "Class IotEdgeHelpers Inheritance System.Object IotEdgeHelpers Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class IotEdgeHelpers : object Methods | Improve this Doc View Source IsRunningInIotEdge() Check if we're running in IoT Edge context or not Declaration public static bool IsRunningInIotEdge() Returns Type Description System.Boolean True if we are running in IoT Edge context, false if not"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.IotModuleClient.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.IotModuleClient.html",
    "title": "Class IotModuleClient | DocFX Material",
    "keywords": "Class IotModuleClient An IotModuleClient with an actual underlying EdgeHub ModuleClient. Inheritance System.Object IotModuleClient Implements IIotModuleClient ISubscribingReceiverClient < System.ValueTuple < System.String , Message >, System.String > IReceiverClient < System.ValueTuple < System.String , Message >> ISenderClient < System.ValueTuple < System.String , Message >> IClient Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class IotModuleClient : object, IIotModuleClient, ISubscribingReceiverClient<(string inputName, Message message), string>, IReceiverClient<(string inputName, Message message)>, ISenderClient<(string outputName, Message message)>, IClient Constructors | Improve this Doc View Source IotModuleClient(ILogger) Declaration public IotModuleClient(ILogger logger) Parameters Type Name Description ILogger logger Methods | Improve this Doc View Source Connect() Declaration public Task Connect() Returns Type Description Task | Improve this Doc View Source SendAsync((String outputName, Message message)) Declaration public Task SendAsync((string outputName, Message message) data) Parameters Type Name Description System.ValueTuple < System.String , Message > data Returns Type Description Task | Improve this Doc View Source SetInputMessageHandlerAsync(String, MessageHandler, Object) Declaration public Task SetInputMessageHandlerAsync(string inputName, MessageHandler messageHandler, object userContext) Parameters Type Name Description System.String inputName MessageHandler messageHandler System.Object userContext Returns Type Description Task | Improve this Doc View Source Subscribe(String) Declaration public Task Subscribe(string topic) Parameters Type Name Description System.String topic Returns Type Description Task Events | Improve this Doc View Source OnDataReceived Declaration public event DataReceivedDelegate<(string inputName, Message message)> OnDataReceived Event Type Type Description DataReceivedDelegate < System.ValueTuple < System.String , Message >> Implements IIotModuleClient ISubscribingReceiverClient<DataType, TopicType> IReceiverClient<DataType> ISenderClient<DataType> IClient"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.NullIotModuleClient.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.NullIotModuleClient.html",
    "title": "Class NullIotModuleClient | DocFX Material",
    "keywords": "Class NullIotModuleClient A mocked IotModuleClient, used when there is no edgeHub running on the system. Will be used during testing. Inheritance System.Object NullIotModuleClient Implements IIotModuleClient ISubscribingReceiverClient < System.ValueTuple < System.String , Message >, System.String > IReceiverClient < System.ValueTuple < System.String , Message >> ISenderClient < System.ValueTuple < System.String , Message >> IClient Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class NullIotModuleClient : object, IIotModuleClient, ISubscribingReceiverClient<(string inputName, Message message), string>, IReceiverClient<(string inputName, Message message)>, ISenderClient<(string outputName, Message message)>, IClient Constructors | Improve this Doc View Source NullIotModuleClient(ILogger) Declaration public NullIotModuleClient(ILogger logger) Parameters Type Name Description ILogger logger Properties | Improve this Doc View Source MessagesSent Declaration public List<(string, string)> MessagesSent { get; } Property Value Type Description List < System.ValueTuple < System.String , System.String >> Methods | Improve this Doc View Source Connect() Declaration public Task Connect() Returns Type Description Task | Improve this Doc View Source SendAsync((String outputName, Message message)) Declaration public Task SendAsync((string outputName, Message message) data) Parameters Type Name Description System.ValueTuple < System.String , Message > data Returns Type Description Task | Improve this Doc View Source SimulateIncomingEvent(String, String) Declaration public void SimulateIncomingEvent(string inputName, string value) Parameters Type Name Description System.String inputName System.String value | Improve this Doc View Source SimulateIncomingEventAsync(String, String) Declaration public Task SimulateIncomingEventAsync(string inputName, string value) Parameters Type Name Description System.String inputName System.String value Returns Type Description Task | Improve this Doc View Source Subscribe(String) Declaration public Task Subscribe(string inputName) Parameters Type Name Description System.String inputName Returns Type Description Task Events | Improve this Doc View Source OnDataReceived Declaration public event DataReceivedDelegate<(string inputName, Message message)> OnDataReceived Event Type Type Description DataReceivedDelegate < System.ValueTuple < System.String , Message >> Implements IIotModuleClient ISubscribingReceiverClient<DataType, TopicType> IReceiverClient<DataType> ISenderClient<DataType> IClient"
  },
  "api/RaaLabs.Edge.Modules.EdgeHub.OutputNameAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.EdgeHub.OutputNameAttribute.html",
    "title": "Class OutputNameAttribute | DocFX Material",
    "keywords": "Class OutputNameAttribute Attribute for the EdgeHub output name. All classes implementing IEdgeHubOutgoingEvent should use this annotation. Inheritance System.Object OutputNameAttribute Namespace : RaaLabs.Edge.Modules.EdgeHub Assembly : RaaLabs.Edge.Modules.EdgeHub.dll Syntax public class OutputNameAttribute : Attribute Constructors | Improve this Doc View Source OutputNameAttribute(String) Declaration public OutputNameAttribute(string outputName) Parameters Type Name Description System.String outputName Properties | Improve this Doc View Source OutputName Declaration public string OutputName { get; } Property Value Type Description System.String"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.AsyncEventEmitter-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.AsyncEventEmitter-1.html",
    "title": "Delegate AsyncEventEmitter<T> | DocFX Material",
    "keywords": "Delegate AsyncEventEmitter<T> A delegate function connected to the \"ProduceAsync(...)\" function of the Event Handler for the specified data type T. Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public delegate Task AsyncEventEmitter<in T>(T event) where T : IEvent; Parameters Type Name Description T event Returns Type Description Task Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.AutofacExtensions.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.AutofacExtensions.html",
    "title": "Class AutofacExtensions | DocFX Material",
    "keywords": "Class AutofacExtensions Inheritance System.Object AutofacExtensions Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public static class AutofacExtensions : object Methods | Improve this Doc View Source RegisterBridge<TImplementer>(ContainerBuilder) Declaration public static IRegistrationBuilder<TImplementer, ConcreteReflectionActivatorData, SingleRegistrationStyle> RegisterBridge<TImplementer>(this ContainerBuilder builder) where TImplementer : IBridge Parameters Type Name Description ContainerBuilder builder Returns Type Description IRegistrationBuilder <TImplementer, ConcreteReflectionActivatorData , SingleRegistrationStyle > Type Parameters Name Description TImplementer"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.DataReceivedDelegate-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.DataReceivedDelegate-1.html",
    "title": "Delegate DataReceivedDelegate<DataType> | DocFX Material",
    "keywords": "Delegate DataReceivedDelegate<DataType> Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public delegate Task DataReceivedDelegate<DataType>(Type connectionType, DataType data); Parameters Type Name Description Type connectionType DataType data Returns Type Description Task Type Parameters Name Description DataType"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.EventEmitter-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.EventEmitter-1.html",
    "title": "Delegate EventEmitter<T> | DocFX Material",
    "keywords": "Delegate EventEmitter<T> A delegate function connected to the \"Produce(...)\" function of the Event Handler for the specified data type T. Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public delegate void EventEmitter<in T>(T event) where T : IEvent; Parameters Type Name Description T event Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.EventHandler-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.EventHandler-1.html",
    "title": "Class EventHandler<T> | DocFX Material",
    "keywords": "Class EventHandler<T> An event handler for the given event type T. This is responsible for the \"plumbing\" between event producers and event consumers. It exposes a function \"Produce(...)\", which will be called by all event producers. On a new incoming event, the EventHandler class will iterate through all the consumers for its event type T, calling the \"Handle(T @event)&quot;/&quot;HandleAsync(T @event)&quot; function of all these classes. For normal development, this class can be ignored by the developer. Inheritance System.Object EventHandler<T> Implements IEventHandler <T> IEventHandler IEventPropagator <T> Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public class EventHandler<T> : object, IEventHandler<T>, IEventHandler, IEventPropagator<T> where T : IEvent Type Parameters Name Description T the event type Constructors | Improve this Doc View Source EventHandler(ILifetimeScope) Declaration public EventHandler(ILifetimeScope scope) Parameters Type Name Description ILifetimeScope scope Methods | Improve this Doc View Source GetSubtypes() Declaration public ISet<Type> GetSubtypes() Returns Type Description ISet < Type > | Improve this Doc View Source Produce(T) Called by the event emitter to produce a new event. Declaration public void Produce(T event) Parameters Type Name Description T event | Improve this Doc View Source ProduceAsync(T) Called by the event emitter to produce a new async event. Declaration public Task ProduceAsync(T event) Parameters Type Name Description T event Returns Type Description Task | Improve this Doc View Source PropagateEvent(T, ISet<Object>) Declaration public void PropagateEvent(T event, ISet<object> visitedHandlers) Parameters Type Name Description T event ISet < System.Object > visitedHandlers | Improve this Doc View Source PropagateEventAsync(T, ISet<Object>) Declaration public Task PropagateEventAsync(T event, ISet<object> visitedHandlers) Parameters Type Name Description T event ISet < System.Object > visitedHandlers Returns Type Description Task | Improve this Doc View Source RegisterAsyncSubtypeHandler(Type, Func<T, ISet<Object>, Task>) Declaration protected void RegisterAsyncSubtypeHandler(Type type, Func<T, ISet<object>, Task> handler) Parameters Type Name Description Type type Func <T, ISet < System.Object >, Task > handler | Improve this Doc View Source RegisterSubtypeHandler(Type, Action<T, ISet<Object>>) Declaration protected void RegisterSubtypeHandler(Type type, Action<T, ISet<object>> handler) Parameters Type Name Description Type type Action <T, ISet < System.Object >> handler | Improve this Doc View Source Subscribe(Action<T>) Called by the subsciber function to start subscribing to event. Declaration public IDisposable Subscribe(Action<T> observerFunction) Parameters Type Name Description Action <T> observerFunction Returns Type Description IDisposable | Improve this Doc View Source Subscribe(Func<T, Task>) Called by the subsciber function to start subscribing to event. Declaration public IDisposable Subscribe(Func<T, Task> observerFunction) Parameters Type Name Description Func <T, Task > observerFunction Returns Type Description IDisposable | Improve this Doc View Source Subscribe(IConsumeEvent<T>) Called by the subsciber class to start subscribing to event Declaration public IDisposable Subscribe(IConsumeEvent<T> observer) Parameters Type Name Description IConsumeEvent <T> observer Returns Type Description IDisposable | Improve this Doc View Source Subscribe(IConsumeEventAsync<T>) Called by the subsciber class to start subscribing to event Declaration public IDisposable Subscribe(IConsumeEventAsync<T> observer) Parameters Type Name Description IConsumeEventAsync <T> observer Returns Type Description IDisposable Implements IEventHandler<T> IEventHandler IEventPropagator<T>"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.EventHandling.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.EventHandling.html",
    "title": "Class EventHandling | DocFX Material",
    "keywords": "Class EventHandling The module for registering Event Handling for the application. Inheritance System.Object EventHandling Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public class EventHandling : Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.html",
    "title": "Namespace RaaLabs.Edge.Modules.EventHandling | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.EventHandling Classes AutofacExtensions EventHandler<T> An event handler for the given event type T. This is responsible for the \"plumbing\" between event producers and event consumers. It exposes a function \"Produce(...)\", which will be called by all event producers. On a new incoming event, the EventHandler class will iterate through all the consumers for its event type T, calling the \"Handle(T @event)&quot;/&quot;HandleAsync(T @event)&quot; function of all these classes. For normal development, this class can be ignored by the developer. EventHandling The module for registering Event Handling for the application. SetupBridges This class will add support for IBridge components to the application. SetupEventHandlers This class will add support for RaaLabs.Edge.Modules.EventHandling.EventHandlers to the application. TypeExtensions Unsubscriber<T> Remove consumer class from list of subscribers when it is deleted UnsubscriberFunction<T> Remove consumer function from list of subscribers when it is deleted Interfaces IBatchedSenderClient<DataType> IBatchedSenderClient<ConnectionType, DataType> IBridge IBridgeIncomingEvent<T> IBridgeOutgoingEvent<T> IClient IClient<ConnectionType> IClientConnection IConsumeEvent IConsumeEvent<T> A class implementing this interface will have its Handle(T @event) function called whenever a new event of this type is produced. IConsumeEventAsync<T> A class implementing this interface will have its HandleAsync(T @event) function called whenever a new event of this type is produced. IEvent A marker interface for signalling to the Event Handling module that a given type is meant as an event type. IEventHandler IEventHandler<T> IEventPropagator<T> IProduceEvent IProduceEvent<T> IReceiverClient<DataType> IReceiverClient<ConnectionType, DataType> ISenderClient<DataType> ISenderClient<ConnectionType, DataType> ISubscribingReceiverClient<DataType, TopicType> ISubscribingReceiverClient<ConnectionType, DataType, TopicType> Delegates AsyncEventEmitter<T> A delegate function connected to the \"ProduceAsync(...)\" function of the Event Handler for the specified data type T. DataReceivedDelegate<DataType> EventEmitter<T> A delegate function connected to the \"Produce(...)\" function of the Event Handler for the specified data type T."
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IBatchedSenderClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IBatchedSenderClient-1.html",
    "title": "Interface IBatchedSenderClient<DataType> | DocFX Material",
    "keywords": "Interface IBatchedSenderClient<DataType> Inherited Members IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IBatchedSenderClient<DataType> : IClient Type Parameters Name Description DataType Methods | Improve this Doc View Source SendBatchAsync(IEnumerable<DataType>) Declaration Task SendBatchAsync(IEnumerable<DataType> data) Parameters Type Name Description IEnumerable <DataType> data Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IBatchedSenderClient-2.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IBatchedSenderClient-2.html",
    "title": "Interface IBatchedSenderClient<ConnectionType, DataType> | DocFX Material",
    "keywords": "Interface IBatchedSenderClient<ConnectionType, DataType> Inherited Members IBatchedSenderClient<DataType>.SendBatchAsync(IEnumerable<DataType>) IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IBatchedSenderClient<ConnectionType, DataType> : IBatchedSenderClient<DataType>, IClient<ConnectionType>, IClient where ConnectionType : IClientConnection Type Parameters Name Description ConnectionType DataType"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IBridge.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IBridge.html",
    "title": "Interface IBridge | DocFX Material",
    "keywords": "Interface IBridge Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IBridge Methods | Improve this Doc View Source SetupBridge() Declaration Task SetupBridge() Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IBridgeIncomingEvent-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IBridgeIncomingEvent-1.html",
    "title": "Interface IBridgeIncomingEvent<T> | DocFX Material",
    "keywords": "Interface IBridgeIncomingEvent<T> Inherited Members IBridge.SetupBridge() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IBridgeIncomingEvent<T> : IBridge, IProduceEvent<T>, IProduceEvent where T : IEvent Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IBridgeOutgoingEvent-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IBridgeOutgoingEvent-1.html",
    "title": "Interface IBridgeOutgoingEvent<T> | DocFX Material",
    "keywords": "Interface IBridgeOutgoingEvent<T> Inherited Members IBridge.SetupBridge() IConsumeEvent<T>.Handle(T) Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IBridgeOutgoingEvent<T> : IBridge, IConsumeEvent<T>, IConsumeEvent where T : IEvent Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IClient.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IClient.html",
    "title": "Interface IClient | DocFX Material",
    "keywords": "Interface IClient Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IClient Methods | Improve this Doc View Source Connect() Declaration Task Connect() Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IClient-1.html",
    "title": "Interface IClient<ConnectionType> | DocFX Material",
    "keywords": "Interface IClient<ConnectionType> Inherited Members IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IClient<ConnectionType> : IClient where ConnectionType : IClientConnection Type Parameters Name Description ConnectionType"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IClientConnection.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IClientConnection.html",
    "title": "Interface IClientConnection | DocFX Material",
    "keywords": "Interface IClientConnection Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IClientConnection"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IConsumeEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IConsumeEvent.html",
    "title": "Interface IConsumeEvent | DocFX Material",
    "keywords": "Interface IConsumeEvent Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IConsumeEvent"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IConsumeEvent-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IConsumeEvent-1.html",
    "title": "Interface IConsumeEvent<T> | DocFX Material",
    "keywords": "Interface IConsumeEvent<T> A class implementing this interface will have its Handle(T @event) function called whenever a new event of this type is produced. Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IConsumeEvent<in T> : IConsumeEvent Type Parameters Name Description T the type to consume Methods | Improve this Doc View Source Handle(T) Declaration void Handle(T event) Parameters Type Name Description T event"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IConsumeEventAsync-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IConsumeEventAsync-1.html",
    "title": "Interface IConsumeEventAsync<T> | DocFX Material",
    "keywords": "Interface IConsumeEventAsync<T> A class implementing this interface will have its HandleAsync(T @event) function called whenever a new event of this type is produced. Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IConsumeEventAsync<in T> : IConsumeEvent Type Parameters Name Description T the type to consume Methods | Improve this Doc View Source HandleAsync(T) Declaration Task HandleAsync(T event) Parameters Type Name Description T event Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IEvent.html",
    "title": "Interface IEvent | DocFX Material",
    "keywords": "Interface IEvent A marker interface for signalling to the Event Handling module that a given type is meant as an event type. Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IEvent"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IEventHandler.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IEventHandler.html",
    "title": "Interface IEventHandler | DocFX Material",
    "keywords": "Interface IEventHandler Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IEventHandler Methods | Improve this Doc View Source GetSubtypes() Declaration ISet<Type> GetSubtypes() Returns Type Description ISet < Type >"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IEventHandler-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IEventHandler-1.html",
    "title": "Interface IEventHandler<T> | DocFX Material",
    "keywords": "Interface IEventHandler<T> Inherited Members IEventHandler.GetSubtypes() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IEventHandler<T> : IEventHandler where T : IEvent Type Parameters Name Description T Methods | Improve this Doc View Source Produce(T) Declaration void Produce(T event) Parameters Type Name Description T event | Improve this Doc View Source ProduceAsync(T) Declaration Task ProduceAsync(T event) Parameters Type Name Description T event Returns Type Description Task | Improve this Doc View Source Subscribe(Action<T>) Declaration IDisposable Subscribe(Action<T> observerFunction) Parameters Type Name Description Action <T> observerFunction Returns Type Description IDisposable | Improve this Doc View Source Subscribe(Func<T, Task>) Declaration IDisposable Subscribe(Func<T, Task> observerFunction) Parameters Type Name Description Func <T, Task > observerFunction Returns Type Description IDisposable | Improve this Doc View Source Subscribe(IConsumeEvent<T>) Declaration IDisposable Subscribe(IConsumeEvent<T> observer) Parameters Type Name Description IConsumeEvent <T> observer Returns Type Description IDisposable | Improve this Doc View Source Subscribe(IConsumeEventAsync<T>) Declaration IDisposable Subscribe(IConsumeEventAsync<T> observer) Parameters Type Name Description IConsumeEventAsync <T> observer Returns Type Description IDisposable"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IEventPropagator-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IEventPropagator-1.html",
    "title": "Interface IEventPropagator<T> | DocFX Material",
    "keywords": "Interface IEventPropagator<T> Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IEventPropagator<in T> where T : IEvent Type Parameters Name Description T Methods | Improve this Doc View Source PropagateEvent(T, ISet<Object>) Declaration void PropagateEvent(T event, ISet<object> visitedHandlers) Parameters Type Name Description T event ISet < System.Object > visitedHandlers | Improve this Doc View Source PropagateEventAsync(T, ISet<Object>) Declaration Task PropagateEventAsync(T event, ISet<object> visitedHandlers) Parameters Type Name Description T event ISet < System.Object > visitedHandlers Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IProduceEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IProduceEvent.html",
    "title": "Interface IProduceEvent | DocFX Material",
    "keywords": "Interface IProduceEvent Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IProduceEvent"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IProduceEvent-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IProduceEvent-1.html",
    "title": "Interface IProduceEvent<T> | DocFX Material",
    "keywords": "Interface IProduceEvent<T> Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IProduceEvent<T> : IProduceEvent Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IReceiverClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IReceiverClient-1.html",
    "title": "Interface IReceiverClient<DataType> | DocFX Material",
    "keywords": "Interface IReceiverClient<DataType> Inherited Members IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IReceiverClient<DataType> : IClient Type Parameters Name Description DataType Events | Improve this Doc View Source OnDataReceived Declaration event DataReceivedDelegate<DataType> OnDataReceived Event Type Type Description DataReceivedDelegate <DataType>"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.IReceiverClient-2.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.IReceiverClient-2.html",
    "title": "Interface IReceiverClient<ConnectionType, DataType> | DocFX Material",
    "keywords": "Interface IReceiverClient<ConnectionType, DataType> Inherited Members IReceiverClient<DataType>.OnDataReceived IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface IReceiverClient<ConnectionType, DataType> : IReceiverClient<DataType>, IClient<ConnectionType>, IClient where ConnectionType : IClientConnection Type Parameters Name Description ConnectionType DataType"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.ISenderClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.ISenderClient-1.html",
    "title": "Interface ISenderClient<DataType> | DocFX Material",
    "keywords": "Interface ISenderClient<DataType> Inherited Members IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface ISenderClient<DataType> : IClient Type Parameters Name Description DataType Methods | Improve this Doc View Source SendAsync(DataType) Declaration Task SendAsync(DataType data) Parameters Type Name Description DataType data Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.ISenderClient-2.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.ISenderClient-2.html",
    "title": "Interface ISenderClient<ConnectionType, DataType> | DocFX Material",
    "keywords": "Interface ISenderClient<ConnectionType, DataType> Inherited Members ISenderClient<DataType>.SendAsync(DataType) IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface ISenderClient<ConnectionType, DataType> : ISenderClient<DataType>, IClient<ConnectionType>, IClient where ConnectionType : IClientConnection Type Parameters Name Description ConnectionType DataType"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.ISubscribingReceiverClient-2.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.ISubscribingReceiverClient-2.html",
    "title": "Interface ISubscribingReceiverClient<DataType, TopicType> | DocFX Material",
    "keywords": "Interface ISubscribingReceiverClient<DataType, TopicType> Inherited Members IReceiverClient<DataType>.OnDataReceived IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface ISubscribingReceiverClient<DataType, TopicType> : IReceiverClient<DataType>, IClient Type Parameters Name Description DataType TopicType Methods | Improve this Doc View Source Subscribe(TopicType) Declaration Task Subscribe(TopicType topic) Parameters Type Name Description TopicType topic Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.ISubscribingReceiverClient-3.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.ISubscribingReceiverClient-3.html",
    "title": "Interface ISubscribingReceiverClient<ConnectionType, DataType, TopicType> | DocFX Material",
    "keywords": "Interface ISubscribingReceiverClient<ConnectionType, DataType, TopicType> Inherited Members ISubscribingReceiverClient<DataType, TopicType>.Subscribe(TopicType) IReceiverClient<DataType>.OnDataReceived IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public interface ISubscribingReceiverClient<ConnectionType, DataType, TopicType> : ISubscribingReceiverClient<DataType, TopicType>, IReceiverClient<ConnectionType, DataType>, IReceiverClient<DataType>, IClient<ConnectionType>, IClient where ConnectionType : IClientConnection Type Parameters Name Description ConnectionType DataType TopicType"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.SetupBridges.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.SetupBridges.html",
    "title": "Class SetupBridges | DocFX Material",
    "keywords": "Class SetupBridges This class will add support for IBridge components to the application. Inheritance System.Object SetupBridges Implements IRegistrationStage IBootloader Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public class SetupBridges : object, IRegistrationStage, IBootloader Constructors | Improve this Doc View Source SetupBridges(SetupEventHandlers) Declaration public SetupBridges(SetupEventHandlers setupEventHandlers) Parameters Type Name Description SetupEventHandlers setupEventHandlers Properties | Improve this Doc View Source Status Declaration public Status Status { get; } Property Value Type Description Status Methods | Improve this Doc View Source RegistrationStage(ContainerBuilder) Declaration public void RegistrationStage(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder Implements IRegistrationStage IBootloader"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.SetupEventHandlers.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.SetupEventHandlers.html",
    "title": "Class SetupEventHandlers | DocFX Material",
    "keywords": "Class SetupEventHandlers This class will add support for RaaLabs.Edge.Modules.EventHandling.EventHandlers to the application. Inheritance System.Object SetupEventHandlers Implements IPreRegistrationStage IRegistrationStage IPostRegistrationStage IBootloader Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public class SetupEventHandlers : object, IPreRegistrationStage, IRegistrationStage, IPostRegistrationStage, IBootloader Properties | Improve this Doc View Source Status Declaration public Status Status { get; } Property Value Type Description Status Methods | Improve this Doc View Source PostRegistration(ILifetimeScope) Declaration public void PostRegistration(ILifetimeScope newScope) Parameters Type Name Description ILifetimeScope newScope | Improve this Doc View Source PreRegistration(ILifetimeScope) Declaration public void PreRegistration(ILifetimeScope oldScope) Parameters Type Name Description ILifetimeScope oldScope | Improve this Doc View Source RegistrationStage(ContainerBuilder) Declaration public void RegistrationStage(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder Implements IPreRegistrationStage IRegistrationStage IPostRegistrationStage IBootloader"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.TypeExtensions.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.TypeExtensions.html",
    "title": "Class TypeExtensions | DocFX Material",
    "keywords": "Class TypeExtensions Inheritance System.Object TypeExtensions Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public static class TypeExtensions : object Methods | Improve this Doc View Source GetAttribute<T>(Type) Get a specified attribute for the given class. Declaration public static T GetAttribute<T>(this Type type) Parameters Type Name Description Type type Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetImmediateInterfaces(Type) Get all interfaces implemented for this class that is not implemented in inherited interfaces. Declaration public static Type[] GetImmediateInterfaces(this Type type) Parameters Type Name Description Type type Returns Type Description Type []"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.Unsubscriber-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.Unsubscriber-1.html",
    "title": "Class Unsubscriber<T> | DocFX Material",
    "keywords": "Class Unsubscriber<T> Remove consumer class from list of subscribers when it is deleted Inheritance System.Object Unsubscriber<T> Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public class Unsubscriber<T> : IDisposable Type Parameters Name Description T the event type Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/RaaLabs.Edge.Modules.EventHandling.UnsubscriberFunction-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHandling.UnsubscriberFunction-1.html",
    "title": "Class UnsubscriberFunction<T> | DocFX Material",
    "keywords": "Class UnsubscriberFunction<T> Remove consumer function from list of subscribers when it is deleted Inheritance System.Object UnsubscriberFunction<T> Namespace : RaaLabs.Edge.Modules.EventHandling Assembly : RaaLabs.Edge.Modules.EventHandling.dll Syntax public class UnsubscriberFunction<T> : IDisposable Type Parameters Name Description T the event type Methods | Improve this Doc View Source Dispose() Declaration public void Dispose()"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.AzureBlobStorageEventProcessor-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.AzureBlobStorageEventProcessor-1.html",
    "title": "Class AzureBlobStorageEventProcessor<TPartition> | DocFX Material",
    "keywords": "Class AzureBlobStorageEventProcessor<TPartition> Inheritance System.Object AzureBlobStorageEventProcessor<TPartition> Namespace : RaaLabs.Edge.Modules.EventHub.Client.Consumer Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public abstract class AzureBlobStorageEventProcessor<TPartition> : EventProcessor<TPartition> where TPartition : EventProcessorPartition, new() Type Parameters Name Description TPartition Constructors | Improve this Doc View Source AzureBlobStorageEventProcessor(Int32, String, String, BlobContainerClient, EventProcessorOptions) Declaration protected AzureBlobStorageEventProcessor(int eventBatchMaximumCount, string consumerGroup, string connectionString, BlobContainerClient storageContainer, EventProcessorOptions options = null) Parameters Type Name Description System.Int32 eventBatchMaximumCount System.String consumerGroup System.String connectionString BlobContainerClient storageContainer EventProcessorOptions options | Improve this Doc View Source AzureBlobStorageEventProcessor(Int32, String, String, String, BlobContainerClient, EventProcessorOptions) Declaration protected AzureBlobStorageEventProcessor(int eventBatchMaximumCount, string consumerGroup, string connectionString, string eventHubName, BlobContainerClient storageContainer, EventProcessorOptions options = null) Parameters Type Name Description System.Int32 eventBatchMaximumCount System.String consumerGroup System.String connectionString System.String eventHubName BlobContainerClient storageContainer EventProcessorOptions options Methods | Improve this Doc View Source CheckpointAsync(TPartition, EventData, CancellationToken) Declaration protected Task CheckpointAsync(TPartition partition, EventData data, CancellationToken cancellationToken) Parameters Type Name Description TPartition partition EventData data CancellationToken cancellationToken Returns Type Description Task | Improve this Doc View Source ClaimOwnershipAsync(IEnumerable<EventProcessorPartitionOwnership>, CancellationToken) Declaration protected override Task<IEnumerable<EventProcessorPartitionOwnership>> ClaimOwnershipAsync(IEnumerable<EventProcessorPartitionOwnership> desiredOwnership, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable < EventProcessorPartitionOwnership > desiredOwnership CancellationToken cancellationToken Returns Type Description Task < IEnumerable < EventProcessorPartitionOwnership >> | Improve this Doc View Source GetCheckpointAsync(String, CancellationToken) Declaration protected override Task<EventProcessorCheckpoint> GetCheckpointAsync(string partitionId, CancellationToken cancellationToken) Parameters Type Name Description System.String partitionId CancellationToken cancellationToken Returns Type Description Task < EventProcessorCheckpoint > | Improve this Doc View Source ListCheckpointsAsync(CancellationToken) Declaration protected override Task<IEnumerable<EventProcessorCheckpoint>> ListCheckpointsAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < EventProcessorCheckpoint >> | Improve this Doc View Source ListOwnershipAsync(CancellationToken) Declaration protected override Task<IEnumerable<EventProcessorPartitionOwnership>> ListOwnershipAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < IEnumerable < EventProcessorPartitionOwnership >>"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.EventDataReceivedDelegate.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.EventDataReceivedDelegate.html",
    "title": "Delegate EventDataReceivedDelegate | DocFX Material",
    "keywords": "Delegate EventDataReceivedDelegate Namespace : RaaLabs.Edge.Modules.EventHub.Client.Consumer Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public delegate Task EventDataReceivedDelegate(Type connection, EventData data); Parameters Type Name Description Type connection EventData data Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.html",
    "title": "Namespace RaaLabs.Edge.Modules.EventHub.Client.Consumer | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.EventHub.Client.Consumer Classes AzureBlobStorageEventProcessor<TPartition> Interfaces IEventHubConsumerClient IEventHubConsumerClient<ConnectionType> Delegates EventDataReceivedDelegate"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.IEventHubConsumerClient.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.IEventHubConsumerClient.html",
    "title": "Interface IEventHubConsumerClient | DocFX Material",
    "keywords": "Interface IEventHubConsumerClient Inherited Members IReceiverClient<EventData>.OnDataReceived IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHub.Client.Consumer Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubConsumerClient : IReceiverClient<EventData>, IClient"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.IEventHubConsumerClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Consumer.IEventHubConsumerClient-1.html",
    "title": "Interface IEventHubConsumerClient<ConnectionType> | DocFX Material",
    "keywords": "Interface IEventHubConsumerClient<ConnectionType> Inherited Members IReceiverClient<EventData>.OnDataReceived IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHub.Client.Consumer Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubConsumerClient<ConnectionType> : IEventHubConsumerClient, IReceiverClient<ConnectionType, EventData>, IReceiverClient<EventData>, IClient<ConnectionType>, IClient where ConnectionType : IEventHubConnection Type Parameters Name Description ConnectionType"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Producer.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Producer.html",
    "title": "Namespace RaaLabs.Edge.Modules.EventHub.Client.Producer | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.EventHub.Client.Producer Interfaces IEventHubProducerClient IEventHubProducerClient<ConnectionType>"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Producer.IEventHubProducerClient.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Producer.IEventHubProducerClient.html",
    "title": "Interface IEventHubProducerClient | DocFX Material",
    "keywords": "Interface IEventHubProducerClient Inherited Members ISenderClient<EventData>.SendAsync(EventData) IBatchedSenderClient<EventData>.SendBatchAsync(IEnumerable<EventData>) IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHub.Client.Producer Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubProducerClient : ISenderClient<EventData>, IBatchedSenderClient<EventData>, IClient"
  },
  "api/RaaLabs.Edge.Modules.EventHub.Client.Producer.IEventHubProducerClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.Client.Producer.IEventHubProducerClient-1.html",
    "title": "Interface IEventHubProducerClient<ConnectionType> | DocFX Material",
    "keywords": "Interface IEventHubProducerClient<ConnectionType> Inherited Members ISenderClient<EventData>.SendAsync(EventData) IBatchedSenderClient<EventData>.SendBatchAsync(IEnumerable<EventData>) IClient.Connect() Namespace : RaaLabs.Edge.Modules.EventHub.Client.Producer Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubProducerClient<ConnectionType> : IEventHubProducerClient, ISenderClient<ConnectionType, EventData>, ISenderClient<EventData>, IBatchedSenderClient<ConnectionType, EventData>, IBatchedSenderClient<EventData>, IClient<ConnectionType>, IClient where ConnectionType : IEventHubConnection Type Parameters Name Description ConnectionType"
  },
  "api/RaaLabs.Edge.Modules.EventHub.DataBatcher-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.DataBatcher-1.html",
    "title": "Class DataBatcher<T> | DocFX Material",
    "keywords": "Class DataBatcher<T> Inheritance System.Object DataBatcher<T> Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public class DataBatcher<T> : object Type Parameters Name Description T Constructors | Improve this Doc View Source DataBatcher(TimeSpan, Int32) Declaration public DataBatcher(TimeSpan timeSpan, int maxBatchSize = null) Parameters Type Name Description TimeSpan timeSpan System.Int32 maxBatchSize Methods | Improve this Doc View Source Enqueue(T) Declaration public Task Enqueue(T data) Parameters Type Name Description T data Returns Type Description Task Events | Improve this Doc View Source OnDataBatched Declaration public event OnDataBatched<T> OnDataBatched Event Type Type Description OnDataBatched <T>"
  },
  "api/RaaLabs.Edge.Modules.EventHub.EventHub.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.EventHub.html",
    "title": "Class EventHub | DocFX Material",
    "keywords": "Class EventHub The module for registering the EventHub bridge for the application. Inheritance System.Object EventHub Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public class EventHub : Autofac.Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.EventHub.EventHubConnectionAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.EventHubConnectionAttribute.html",
    "title": "Class EventHubConnectionAttribute | DocFX Material",
    "keywords": "Class EventHubConnectionAttribute Attribute for the EventHub input name. All classes implementing IEventHubIncomingEvent should use this annotation. Inheritance System.Object EventHubConnectionAttribute Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public class EventHubConnectionAttribute : Attribute Constructors | Improve this Doc View Source EventHubConnectionAttribute(Type) Declaration public EventHubConnectionAttribute(Type connection) Parameters Type Name Description Type connection Properties | Improve this Doc View Source Connection Declaration public Type Connection { get; } Property Value Type Description Type"
  },
  "api/RaaLabs.Edge.Modules.EventHub.EventHubEventDataConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.EventHubEventDataConverter.html",
    "title": "Class EventHubEventDataConverter | DocFX Material",
    "keywords": "Class EventHubEventDataConverter Converts an event to an EventHub message, and vice versa. Inheritance System.Object EventHubEventDataConverter Implements IEventHubEventDataConverter Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public class EventHubEventDataConverter : object, IEventHubEventDataConverter Constructors | Improve this Doc View Source EventHubEventDataConverter(ILifetimeScope, IEventHandler<IEventHubIncomingEvent>, IEventHandler<IEventHubOutgoingEvent>) Declaration public EventHubEventDataConverter(ILifetimeScope scope, IEventHandler<IEventHubIncomingEvent> incomingHandler, IEventHandler<IEventHubOutgoingEvent> outgoingHandler) Parameters Type Name Description ILifetimeScope scope IEventHandler < IEventHubIncomingEvent > incomingHandler IEventHandler < IEventHubOutgoingEvent > outgoingHandler Methods | Improve this Doc View Source ToEvent(Type, EventData) Convert an EventHub message to an event. Declaration public IEvent ToEvent(Type connection, EventData data) Parameters Type Name Description Type connection The connection that received the message EventData data The event data to convert Returns Type Description IEvent the EventHub EventData converted to an event | Improve this Doc View Source ToEventData(IEvent) Convert an event to an EventHub message. Declaration public (Type connection, EventData data)? ToEventData(IEvent event) Parameters Type Name Description IEvent event The event to convert Returns Type Description System.Nullable < System.ValueTuple < Type , EventData >> a tuple consisting of the connection to send to, and the event converted to event data Implements IEventHubEventDataConverter"
  },
  "api/RaaLabs.Edge.Modules.EventHub.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.html",
    "title": "Namespace RaaLabs.Edge.Modules.EventHub | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.EventHub Classes DataBatcher<T> EventHub The module for registering the EventHub bridge for the application. EventHubConnectionAttribute Attribute for the EventHub input name. All classes implementing IEventHubIncomingEvent should use this annotation. EventHubEventDataConverter Converts an event to an EventHub message, and vice versa. Interfaces IEventHubConnection IEventHubEventDataConverter IEventHubIncomingEvent Marker interface for incoming EventHub events. By implementing this interface for a class, The EventHub module will set up a subscription to the EventHub input with the name given in the InputName attribute for the class. The class will be used for deserializing the incoming event. IEventHubOutgoingEvent Marker interface for outgoing EventHub events. By implementing this interface for a class, The EventHub module will subscribe to this event, and send out the event to EventHub output with the name given in the OutputName attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event. Delegates OnDataBatched<T>"
  },
  "api/RaaLabs.Edge.Modules.EventHub.IEventHubConnection.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.IEventHubConnection.html",
    "title": "Interface IEventHubConnection | DocFX Material",
    "keywords": "Interface IEventHubConnection Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubConnection : IClientConnection Properties | Improve this Doc View Source BlobStorageConnectionString Declaration string BlobStorageConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source BlobStorageContainerName Declaration string BlobStorageContainerName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConnectionString Declaration string ConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConsumerGroup Declaration string ConsumerGroup { get; set; } Property Value Type Description System.String | Improve this Doc View Source DeleteCheckpointStoreAtStartup Declaration bool DeleteCheckpointStoreAtStartup { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EventHubName Declaration string EventHubName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxIncomingBatchCount Declaration int MaxIncomingBatchCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ReaderOptions Declaration EventProcessorOptions ReaderOptions { get; set; } Property Value Type Description EventProcessorOptions"
  },
  "api/RaaLabs.Edge.Modules.EventHub.IEventHubEventDataConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.IEventHubEventDataConverter.html",
    "title": "Interface IEventHubEventDataConverter | DocFX Material",
    "keywords": "Interface IEventHubEventDataConverter Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubEventDataConverter Methods | Improve this Doc View Source ToEvent(Type, EventData) Declaration IEvent ToEvent(Type connection, EventData data) Parameters Type Name Description Type connection EventData data Returns Type Description IEvent | Improve this Doc View Source ToEventData(IEvent) Declaration (Type connection, EventData data)? ToEventData(IEvent event) Parameters Type Name Description IEvent event Returns Type Description System.Nullable < System.ValueTuple < Type , EventData >>"
  },
  "api/RaaLabs.Edge.Modules.EventHub.IEventHubIncomingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.IEventHubIncomingEvent.html",
    "title": "Interface IEventHubIncomingEvent | DocFX Material",
    "keywords": "Interface IEventHubIncomingEvent Marker interface for incoming EventHub events. By implementing this interface for a class, The EventHub module will set up a subscription to the EventHub input with the name given in the InputName attribute for the class. The class will be used for deserializing the incoming event. Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubIncomingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.EventHub.IEventHubOutgoingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.IEventHubOutgoingEvent.html",
    "title": "Interface IEventHubOutgoingEvent | DocFX Material",
    "keywords": "Interface IEventHubOutgoingEvent Marker interface for outgoing EventHub events. By implementing this interface for a class, The EventHub module will subscribe to this event, and send out the event to EventHub output with the name given in the OutputName attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event. Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public interface IEventHubOutgoingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.EventHub.OnDataBatched-1.html": {
    "href": "api/RaaLabs.Edge.Modules.EventHub.OnDataBatched-1.html",
    "title": "Delegate OnDataBatched<T> | DocFX Material",
    "keywords": "Delegate OnDataBatched<T> Namespace : RaaLabs.Edge.Modules.EventHub Assembly : RaaLabs.Edge.Modules.EventHub.dll Syntax public delegate Task OnDataBatched<T>(List<T> batch); Parameters Type Name Description List <T> batch Returns Type Description Task Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Modules.IotHub.Client.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.Client.html",
    "title": "Namespace RaaLabs.Edge.Modules.IotHub.Client | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.IotHub.Client Interfaces IIotHubClient IIotHubClient<ConnectionType> Delegates MessageReceivedDelegate"
  },
  "api/RaaLabs.Edge.Modules.IotHub.Client.IIotHubClient.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.Client.IIotHubClient.html",
    "title": "Interface IIotHubClient | DocFX Material",
    "keywords": "Interface IIotHubClient Inherited Members IReceiverClient<Message>.OnDataReceived ISenderClient<Message>.SendAsync(Message) IClient.Connect() Namespace : RaaLabs.Edge.Modules.IotHub.Client Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public interface IIotHubClient : IReceiverClient<Message>, ISenderClient<Message>, IClient"
  },
  "api/RaaLabs.Edge.Modules.IotHub.Client.IIotHubClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.Client.IIotHubClient-1.html",
    "title": "Interface IIotHubClient<ConnectionType> | DocFX Material",
    "keywords": "Interface IIotHubClient<ConnectionType> Inherited Members IReceiverClient<Message>.OnDataReceived ISenderClient<Message>.SendAsync(Message) IClient.Connect() Namespace : RaaLabs.Edge.Modules.IotHub.Client Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public interface IIotHubClient<ConnectionType> : IIotHubClient, IReceiverClient<ConnectionType, Message>, IReceiverClient<Message>, ISenderClient<ConnectionType, Message>, ISenderClient<Message>, IClient<ConnectionType>, IClient where ConnectionType : IIotHubConnection Type Parameters Name Description ConnectionType"
  },
  "api/RaaLabs.Edge.Modules.IotHub.Client.MessageReceivedDelegate.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.Client.MessageReceivedDelegate.html",
    "title": "Delegate MessageReceivedDelegate | DocFX Material",
    "keywords": "Delegate MessageReceivedDelegate Namespace : RaaLabs.Edge.Modules.IotHub.Client Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public delegate Task MessageReceivedDelegate(Type connection, Message message); Parameters Type Name Description Type connection Message message Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.IotHub.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.html",
    "title": "Namespace RaaLabs.Edge.Modules.IotHub | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.IotHub Classes IotHub The module for registering the IotHub bridge for the application. IotHubBridge Class responsible for bridging events to and from IotHub clients IotHubConnectionAttribute Attribute for the IotHub input name. All classes implementing IIotHubIncomingEvent should use this annotation. IotHubMessageConverter Converts an event to an IotHub message, and vice versa. Interfaces IIotHubConnection IIotHubIncomingEvent Marker interface for incoming IotHub events. By implementing this interface for a class, The IotHub module will set up a subscription to the IotHub connection class specified in the IotHubConnection attribute for the class. The class will be used for deserializing the incoming event. IIotHubMessageConverter IIotHubOutgoingEvent Marker interface for outgoing IotHub events. By implementing this interface for a class, The IotHub module will subscribe to this event, and send out the event to the IotHub connection class specified in the IotHubConnection attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event."
  },
  "api/RaaLabs.Edge.Modules.IotHub.IIotHubConnection.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IIotHubConnection.html",
    "title": "Interface IIotHubConnection | DocFX Material",
    "keywords": "Interface IIotHubConnection Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public interface IIotHubConnection : IClientConnection Properties | Improve this Doc View Source ConnectionString Declaration string ConnectionString { get; set; } Property Value Type Description System.String | Improve this Doc View Source ConsumerGroup Declaration string ConsumerGroup { get; set; } Property Value Type Description System.String | Improve this Doc View Source IotHubName Declaration string IotHubName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxIncomingBatchCount Declaration int MaxIncomingBatchCount { get; set; } Property Value Type Description System.Int32"
  },
  "api/RaaLabs.Edge.Modules.IotHub.IIotHubIncomingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IIotHubIncomingEvent.html",
    "title": "Interface IIotHubIncomingEvent | DocFX Material",
    "keywords": "Interface IIotHubIncomingEvent Marker interface for incoming IotHub events. By implementing this interface for a class, The IotHub module will set up a subscription to the IotHub connection class specified in the IotHubConnection attribute for the class. The class will be used for deserializing the incoming event. Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public interface IIotHubIncomingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.IotHub.IIotHubMessageConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IIotHubMessageConverter.html",
    "title": "Interface IIotHubMessageConverter | DocFX Material",
    "keywords": "Interface IIotHubMessageConverter Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public interface IIotHubMessageConverter Methods | Improve this Doc View Source ToEvent(Type, Message) Declaration IEvent ToEvent(Type connection, Message message) Parameters Type Name Description Type connection Message message Returns Type Description IEvent | Improve this Doc View Source ToMessage(IEvent) Declaration (Type connection, Message message)? ToMessage(IEvent event) Parameters Type Name Description IEvent event Returns Type Description System.Nullable < System.ValueTuple < Type , Message >>"
  },
  "api/RaaLabs.Edge.Modules.IotHub.IIotHubOutgoingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IIotHubOutgoingEvent.html",
    "title": "Interface IIotHubOutgoingEvent | DocFX Material",
    "keywords": "Interface IIotHubOutgoingEvent Marker interface for outgoing IotHub events. By implementing this interface for a class, The IotHub module will subscribe to this event, and send out the event to the IotHub connection class specified in the IotHubConnection attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event. Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public interface IIotHubOutgoingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.IotHub.IotHub.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IotHub.html",
    "title": "Class IotHub | DocFX Material",
    "keywords": "Class IotHub The module for registering the IotHub bridge for the application. Inheritance System.Object IotHub Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public class IotHub : Autofac.Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.IotHub.IotHubBridge.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IotHubBridge.html",
    "title": "Class IotHubBridge | DocFX Material",
    "keywords": "Class IotHubBridge Class responsible for bridging events to and from IotHub clients Inheritance System.Object IotHubBridge Implements IBridgeIncomingEvent < IIotHubIncomingEvent > IProduceEvent < IIotHubIncomingEvent > IProduceEvent IBridgeOutgoingEvent < IIotHubOutgoingEvent > IBridge IConsumeEvent < IIotHubOutgoingEvent > IConsumeEvent Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public class IotHubBridge : object, IBridgeIncomingEvent<IIotHubIncomingEvent>, IProduceEvent<IIotHubIncomingEvent>, IProduceEvent, IBridgeOutgoingEvent<IIotHubOutgoingEvent>, IBridge, IConsumeEvent<IIotHubOutgoingEvent>, IConsumeEvent Constructors | Improve this Doc View Source IotHubBridge(ILifetimeScope, IIotHubMessageConverter, EventHandler<IIotHubIncomingEvent>, EventHandler<IIotHubOutgoingEvent>) Declaration public IotHubBridge(ILifetimeScope scope, IIotHubMessageConverter messageConverter, EventHandler<IIotHubIncomingEvent> incomingHandler, EventHandler<IIotHubOutgoingEvent> outgoingHandler) Parameters Type Name Description ILifetimeScope scope IIotHubMessageConverter messageConverter EventHandler < IIotHubIncomingEvent > incomingHandler EventHandler < IIotHubOutgoingEvent > outgoingHandler Methods | Improve this Doc View Source Handle(IIotHubOutgoingEvent) Declaration public void Handle(IIotHubOutgoingEvent event) Parameters Type Name Description IIotHubOutgoingEvent event | Improve this Doc View Source SetupBridge() Declaration public Task SetupBridge() Returns Type Description Task Events | Improve this Doc View Source IotHubEventReceived Declaration public event EventEmitter<IIotHubIncomingEvent> IotHubEventReceived Event Type Type Description EventEmitter < IIotHubIncomingEvent > Implements IBridgeIncomingEvent<T> IProduceEvent<T> IProduceEvent IBridgeOutgoingEvent<T> IBridge IConsumeEvent<T> IConsumeEvent"
  },
  "api/RaaLabs.Edge.Modules.IotHub.IotHubConnectionAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IotHubConnectionAttribute.html",
    "title": "Class IotHubConnectionAttribute | DocFX Material",
    "keywords": "Class IotHubConnectionAttribute Attribute for the IotHub input name. All classes implementing IIotHubIncomingEvent should use this annotation. Inheritance System.Object IotHubConnectionAttribute Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public class IotHubConnectionAttribute : Attribute Constructors | Improve this Doc View Source IotHubConnectionAttribute(Type) Declaration public IotHubConnectionAttribute(Type connection) Parameters Type Name Description Type connection Properties | Improve this Doc View Source Connection Declaration public Type Connection { get; } Property Value Type Description Type"
  },
  "api/RaaLabs.Edge.Modules.IotHub.IotHubMessageConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.IotHub.IotHubMessageConverter.html",
    "title": "Class IotHubMessageConverter | DocFX Material",
    "keywords": "Class IotHubMessageConverter Converts an event to an IotHub message, and vice versa. Inheritance System.Object IotHubMessageConverter Implements IIotHubMessageConverter Namespace : RaaLabs.Edge.Modules.IotHub Assembly : RaaLabs.Edge.Modules.IotHub.dll Syntax public class IotHubMessageConverter : object, IIotHubMessageConverter Constructors | Improve this Doc View Source IotHubMessageConverter(ILifetimeScope, IEventHandler<IIotHubIncomingEvent>, IEventHandler<IIotHubOutgoingEvent>) Declaration public IotHubMessageConverter(ILifetimeScope scope, IEventHandler<IIotHubIncomingEvent> incomingHandler, IEventHandler<IIotHubOutgoingEvent> outgoingHandler) Parameters Type Name Description ILifetimeScope scope IEventHandler < IIotHubIncomingEvent > incomingHandler IEventHandler < IIotHubOutgoingEvent > outgoingHandler Methods | Improve this Doc View Source ToEvent(Type, Message) Convert an IotHub message to an event. Declaration public IEvent ToEvent(Type connection, Message message) Parameters Type Name Description Type connection The connection that received the message Message message The message to convert Returns Type Description IEvent the IotHub message converted to an event | Improve this Doc View Source ToMessage(IEvent) Convert an event to an IotHub message. Declaration public (Type connection, Message message)? ToMessage(IEvent event) Parameters Type Name Description IEvent event The event to convert Returns Type Description System.Nullable < System.ValueTuple < Type , Message >> a tuple consisting of the connection to send to, and the event converted to a message Implements IIotHubMessageConverter"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.ApplicationBuilderExtensions.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.ApplicationBuilderExtensions.html",
    "title": "Class ApplicationBuilderExtensions | DocFX Material",
    "keywords": "Class ApplicationBuilderExtensions Inheritance System.Object ApplicationBuilderExtensions Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public static class ApplicationBuilderExtensions : object Methods | Improve this Doc View Source WithMqttBroker<T>(ApplicationBuilder) Declaration public static ApplicationBuilder WithMqttBroker<T>(this ApplicationBuilder builder) where T : IMqttBrokerConnection Parameters Type Name Description ApplicationBuilder builder Returns Type Description ApplicationBuilder Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.Authentication.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.Authentication.html",
    "title": "Class Authentication | DocFX Material",
    "keywords": "Class Authentication Inheritance System.Object Authentication Implements IAuthentication Namespace : RaaLabs.Edge.Modules.Mqtt.Client.Authentication Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class Authentication : object, IAuthentication Properties | Improve this Doc View Source Data Declaration public byte[] Data { get; set; } Property Value Type Description System.Byte [] | Improve this Doc View Source Method Declaration public string Method { get; set; } Property Value Type Description System.String Implements IAuthentication"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.html",
    "title": "Namespace RaaLabs.Edge.Modules.Mqtt.Client.Authentication | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.Mqtt.Client.Authentication Classes Authentication UsernameAndPasswordAuthentication Interfaces IAuthentication"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.IAuthentication.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.IAuthentication.html",
    "title": "Interface IAuthentication | DocFX Material",
    "keywords": "Interface IAuthentication Namespace : RaaLabs.Edge.Modules.Mqtt.Client.Authentication Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IAuthentication"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.UsernameAndPasswordAuthentication.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.Authentication.UsernameAndPasswordAuthentication.html",
    "title": "Class UsernameAndPasswordAuthentication | DocFX Material",
    "keywords": "Class UsernameAndPasswordAuthentication Inheritance System.Object UsernameAndPasswordAuthentication Implements IAuthentication Namespace : RaaLabs.Edge.Modules.Mqtt.Client.Authentication Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class UsernameAndPasswordAuthentication : object, IAuthentication Properties | Improve this Doc View Source Password Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source Username Declaration public string Username { get; set; } Property Value Type Description System.String Implements IAuthentication"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.html",
    "title": "Namespace RaaLabs.Edge.Modules.Mqtt.Client | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.Mqtt.Client Classes MqttMessageConverter Converts an event to a MQTT message, and vice versa. MqttRouter<T> Route an MQTT topic to an instance of a given type. MqttTopicMapper A mapper to translate from an MQTT topic to the associated event type for that topic. Interfaces IMqttBrokerClient IMqttBrokerClient<ConnectionType> IMqttMessageConverter IMqttTopicMapper"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttBrokerClient.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttBrokerClient.html",
    "title": "Interface IMqttBrokerClient | DocFX Material",
    "keywords": "Interface IMqttBrokerClient Inherited Members ISubscribingReceiverClient<MqttApplicationMessage, String>.Subscribe(String) IReceiverClient<MqttApplicationMessage>.OnDataReceived ISenderClient<MqttApplicationMessage>.SendAsync(MqttApplicationMessage) IClient.Connect() Namespace : RaaLabs.Edge.Modules.Mqtt.Client Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IMqttBrokerClient : ISubscribingReceiverClient<MqttApplicationMessage, string>, IReceiverClient<MqttApplicationMessage>, ISenderClient<MqttApplicationMessage>, IClient"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttBrokerClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttBrokerClient-1.html",
    "title": "Interface IMqttBrokerClient<ConnectionType> | DocFX Material",
    "keywords": "Interface IMqttBrokerClient<ConnectionType> Inherited Members ISubscribingReceiverClient<MqttApplicationMessage, String>.Subscribe(String) IReceiverClient<MqttApplicationMessage>.OnDataReceived ISenderClient<MqttApplicationMessage>.SendAsync(MqttApplicationMessage) IClient.Connect() Namespace : RaaLabs.Edge.Modules.Mqtt.Client Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IMqttBrokerClient<ConnectionType> : IMqttBrokerClient, ISubscribingReceiverClient<ConnectionType, MqttApplicationMessage, string>, ISubscribingReceiverClient<MqttApplicationMessage, string>, IReceiverClient<ConnectionType, MqttApplicationMessage>, IReceiverClient<MqttApplicationMessage>, ISenderClient<ConnectionType, MqttApplicationMessage>, ISenderClient<MqttApplicationMessage>, IClient<ConnectionType>, IClient where ConnectionType : IMqttBrokerConnection Type Parameters Name Description ConnectionType"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttMessageConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttMessageConverter.html",
    "title": "Interface IMqttMessageConverter | DocFX Material",
    "keywords": "Interface IMqttMessageConverter Namespace : RaaLabs.Edge.Modules.Mqtt.Client Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IMqttMessageConverter Methods | Improve this Doc View Source ToEvent(Type, MqttApplicationMessage) Declaration IEvent ToEvent(Type connection, MqttApplicationMessage message) Parameters Type Name Description Type connection MqttApplicationMessage message Returns Type Description IEvent | Improve this Doc View Source ToMessage(IEvent) Declaration (Type connection, MqttApplicationMessage message)? ToMessage(IEvent event) Parameters Type Name Description IEvent event Returns Type Description System.Nullable < System.ValueTuple < Type , MqttApplicationMessage >>"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttTopicMapper.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.IMqttTopicMapper.html",
    "title": "Interface IMqttTopicMapper | DocFX Material",
    "keywords": "Interface IMqttTopicMapper Namespace : RaaLabs.Edge.Modules.Mqtt.Client Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IMqttTopicMapper Methods | Improve this Doc View Source Resolve(Type, String) Resolve what event type is associated with a given topic. Declaration Type Resolve(Type connection, string topic) Parameters Type Name Description Type connection the connection that received the MQTT message System.String topic the topic for the MQTT message Returns Type Description Type the event type associated with the specified topic"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.MqttMessageConverter.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.MqttMessageConverter.html",
    "title": "Class MqttMessageConverter | DocFX Material",
    "keywords": "Class MqttMessageConverter Converts an event to a MQTT message, and vice versa. Inheritance System.Object MqttMessageConverter Implements IMqttMessageConverter Namespace : RaaLabs.Edge.Modules.Mqtt.Client Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class MqttMessageConverter : object, IMqttMessageConverter Constructors | Improve this Doc View Source MqttMessageConverter(ILifetimeScope, IMqttTopicMapper, IEventHandler<IMqttIncomingEvent>, IEventHandler<IMqttOutgoingEvent>) Declaration public MqttMessageConverter(ILifetimeScope scope, IMqttTopicMapper topicMapper, IEventHandler<IMqttIncomingEvent> incomingHandler, IEventHandler<IMqttOutgoingEvent> outgoingHandler) Parameters Type Name Description ILifetimeScope scope IMqttTopicMapper topicMapper IEventHandler < IMqttIncomingEvent > incomingHandler IEventHandler < IMqttOutgoingEvent > outgoingHandler Methods | Improve this Doc View Source ToEvent(Type, MqttApplicationMessage) Convert an MQTT message to an event. Declaration public IEvent ToEvent(Type connection, MqttApplicationMessage message) Parameters Type Name Description Type connection The connection that received the message MqttApplicationMessage message The message to convert Returns Type Description IEvent the MQTT message converted to an event | Improve this Doc View Source ToMessage(IEvent) Convert an event to an MQTT message. Declaration public (Type connection, MqttApplicationMessage message)? ToMessage(IEvent event) Parameters Type Name Description IEvent event The event to convert Returns Type Description System.Nullable < System.ValueTuple < Type , MqttApplicationMessage >> a tuple consisting of the connection to send to, and the event converted to a message Implements IMqttMessageConverter"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.MqttRouter-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.MqttRouter-1.html",
    "title": "Class MqttRouter<T> | DocFX Material",
    "keywords": "Class MqttRouter<T> Route an MQTT topic to an instance of a given type. Inheritance System.Object MqttRouter<T> Namespace : RaaLabs.Edge.Modules.Mqtt.Client Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class MqttRouter<T> : object where T : class Type Parameters Name Description T Constructors | Improve this Doc View Source MqttRouter(IEnumerable<(String pattern, T target)>) Declaration public MqttRouter(IEnumerable<(string pattern, T target)> routes) Parameters Type Name Description IEnumerable < System.ValueTuple < System.String , T>> routes Methods | Improve this Doc View Source ResolvePath(String) Resolve the value associated with a given topic Declaration public T ResolvePath(string topic) Parameters Type Name Description System.String topic the topic to resolve Returns Type Description T the value associated with the topic, if any. Else, returns null."
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Client.MqttTopicMapper.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Client.MqttTopicMapper.html",
    "title": "Class MqttTopicMapper | DocFX Material",
    "keywords": "Class MqttTopicMapper A mapper to translate from an MQTT topic to the associated event type for that topic. Inheritance System.Object MqttTopicMapper Implements IMqttTopicMapper Namespace : RaaLabs.Edge.Modules.Mqtt.Client Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class MqttTopicMapper : object, IMqttTopicMapper Constructors | Improve this Doc View Source MqttTopicMapper(IEventHandler<IMqttIncomingEvent>, IEventHandler<IMqttOutgoingEvent>) Declaration public MqttTopicMapper(IEventHandler<IMqttIncomingEvent> incomingHandler, IEventHandler<IMqttOutgoingEvent> outgoingHandler) Parameters Type Name Description IEventHandler < IMqttIncomingEvent > incomingHandler IEventHandler < IMqttOutgoingEvent > outgoingHandler Methods | Improve this Doc View Source Resolve(Type, String) Resolve what event type is associated with a given topic. Declaration public Type Resolve(Type connection, string topic) Parameters Type Name Description Type connection the connection that received the MQTT message System.String topic the topic for the MQTT message Returns Type Description Type the event type associated with the specified topic | Improve this Doc View Source ToRegularTopic(String) Convert from topic containing placeholders, to a regular topic containing only wildcards Declaration public static string ToRegularTopic(string topic) Parameters Type Name Description System.String topic Returns Type Description System.String Implements IMqttTopicMapper"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.html",
    "title": "Namespace RaaLabs.Edge.Modules.Mqtt | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.Mqtt Classes ApplicationBuilderExtensions Mqtt The module for registering the EventHub bridge for the application. MqttBridge MqttBrokerConnectionAttribute Attribute for the Mqtt broker connection class. All classes implementing IMqttIncomingEvent or IMqttOutgoingEvent should use this annotation. TemplatedString<T> A small templating util class for parsing and building strings using a specified template. Example: a template string \"{SomeValue} is cooler than {AnotherValue}\", and a class with properties 'SomeValue' and 'AnotherValue'. Interfaces IMqttBrokerConnection IMqttIncomingEvent Marker interface for incoming EventHub events. By implementing this interface for a class, The EventHub module will set up a subscription to the EventHub input with the name given in the InputName attribute for the class. The class will be used for deserializing the incoming event. IMqttOutgoingEvent Marker interface for outgoing EventHub events. By implementing this interface for a class, The EventHub module will subscribe to this event, and send out the event to EventHub output with the name given in the OutputName attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event."
  },
  "api/RaaLabs.Edge.Modules.Mqtt.IMqttBrokerConnection.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.IMqttBrokerConnection.html",
    "title": "Interface IMqttBrokerConnection | DocFX Material",
    "keywords": "Interface IMqttBrokerConnection Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IMqttBrokerConnection : IClientConnection Properties | Improve this Doc View Source Authentication Declaration IAuthentication Authentication { get; set; } Property Value Type Description IAuthentication | Improve this Doc View Source ClientId Declaration string ClientId { get; set; } Property Value Type Description System.String | Improve this Doc View Source Ip Declaration string Ip { get; set; } Property Value Type Description System.String | Improve this Doc View Source Port Declaration int Port { get; set; } Property Value Type Description System.Int32"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.IMqttIncomingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.IMqttIncomingEvent.html",
    "title": "Interface IMqttIncomingEvent | DocFX Material",
    "keywords": "Interface IMqttIncomingEvent Marker interface for incoming EventHub events. By implementing this interface for a class, The EventHub module will set up a subscription to the EventHub input with the name given in the InputName attribute for the class. The class will be used for deserializing the incoming event. Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IMqttIncomingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.IMqttOutgoingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.IMqttOutgoingEvent.html",
    "title": "Interface IMqttOutgoingEvent | DocFX Material",
    "keywords": "Interface IMqttOutgoingEvent Marker interface for outgoing EventHub events. By implementing this interface for a class, The EventHub module will subscribe to this event, and send out the event to EventHub output with the name given in the OutputName attribute for the class, whenever a new event is produced. The class will be used for serializing the outgoing event. Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public interface IMqttOutgoingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.Mqtt.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.Mqtt.html",
    "title": "Class Mqtt | DocFX Material",
    "keywords": "Class Mqtt The module for registering the EventHub bridge for the application. Inheritance System.Object Mqtt Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class Mqtt : Autofac.Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.MqttBridge.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.MqttBridge.html",
    "title": "Class MqttBridge | DocFX Material",
    "keywords": "Class MqttBridge Inheritance System.Object MqttBridge Implements IBridgeIncomingEvent < IMqttIncomingEvent > IProduceEvent < IMqttIncomingEvent > IProduceEvent IBridgeOutgoingEvent < IMqttOutgoingEvent > IBridge IConsumeEvent < IMqttOutgoingEvent > IConsumeEvent Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class MqttBridge : object, IBridgeIncomingEvent<IMqttIncomingEvent>, IProduceEvent<IMqttIncomingEvent>, IProduceEvent, IBridgeOutgoingEvent<IMqttOutgoingEvent>, IBridge, IConsumeEvent<IMqttOutgoingEvent>, IConsumeEvent Constructors | Improve this Doc View Source MqttBridge(ILogger, ILifetimeScope, IMqttMessageConverter, EventHandler<IMqttIncomingEvent>, EventHandler<IMqttOutgoingEvent>) Declaration public MqttBridge(ILogger logger, ILifetimeScope scope, IMqttMessageConverter messageConverter, EventHandler<IMqttIncomingEvent> incomingHandler, EventHandler<IMqttOutgoingEvent> outgoingHandler) Parameters Type Name Description ILogger logger ILifetimeScope scope IMqttMessageConverter messageConverter EventHandler < IMqttIncomingEvent > incomingHandler EventHandler < IMqttOutgoingEvent > outgoingHandler Methods | Improve this Doc View Source Handle(IMqttOutgoingEvent) Declaration public void Handle(IMqttOutgoingEvent event) Parameters Type Name Description IMqttOutgoingEvent event | Improve this Doc View Source SetupBridge() Declaration public Task SetupBridge() Returns Type Description Task Events | Improve this Doc View Source MqttEventReceived Declaration public event EventEmitter<IMqttIncomingEvent> MqttEventReceived Event Type Type Description EventEmitter < IMqttIncomingEvent > Implements IBridgeIncomingEvent<T> IProduceEvent<T> IProduceEvent IBridgeOutgoingEvent<T> IBridge IConsumeEvent<T> IConsumeEvent"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.MqttBrokerConnectionAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.MqttBrokerConnectionAttribute.html",
    "title": "Class MqttBrokerConnectionAttribute | DocFX Material",
    "keywords": "Class MqttBrokerConnectionAttribute Attribute for the Mqtt broker connection class. All classes implementing IMqttIncomingEvent or IMqttOutgoingEvent should use this annotation. Inheritance System.Object MqttBrokerConnectionAttribute Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class MqttBrokerConnectionAttribute : Attribute Constructors | Improve this Doc View Source MqttBrokerConnectionAttribute(Type, String) Declaration public MqttBrokerConnectionAttribute(Type brokerConnection, string topic) Parameters Type Name Description Type brokerConnection System.String topic Properties | Improve this Doc View Source BrokerConnection Declaration public Type BrokerConnection { get; } Property Value Type Description Type | Improve this Doc View Source Topic Declaration public string Topic { get; } Property Value Type Description System.String"
  },
  "api/RaaLabs.Edge.Modules.Mqtt.TemplatedString-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Mqtt.TemplatedString-1.html",
    "title": "Class TemplatedString<T> | DocFX Material",
    "keywords": "Class TemplatedString<T> A small templating util class for parsing and building strings using a specified template. Example: a template string \"{SomeValue} is cooler than {AnotherValue}\", and a class with properties 'SomeValue' and 'AnotherValue'. Inheritance System.Object TemplatedString<T> Namespace : RaaLabs.Edge.Modules.Mqtt Assembly : RaaLabs.Edge.Modules.Mqtt.dll Syntax public class TemplatedString<T> : object Type Parameters Name Description T the type associated with the template Constructors | Improve this Doc View Source TemplatedString(String) Declaration public TemplatedString(string pattern) Parameters Type Name Description System.String pattern Methods | Improve this Doc View Source BuildFrom(T) Build a string from a given instance of the associated type. Declaration public string BuildFrom(T source) Parameters Type Name Description T source the instance of the associated type Returns Type Description System.String a string built from the instance of the associated type | Improve this Doc View Source ExtractTo(String, T) Extract the pattern variables of the string into an instance of the associated type. Declaration public void ExtractTo(string input, T target) Parameters Type Name Description System.String input the input string matching the pattern T target the instance to extract the variables to"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.html",
    "title": "Namespace RaaLabs.Edge.Modules.Scheduling | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.Scheduling Classes Interval<T> A scheduled interval NoScheduleConfiguredException Pattern<T> A scheduled pattern ScheduleAttribute Attribute for creating a schedule from either an interval or a pattern ScheduledJob<T> A scheduled jub Scheduling SchedulingTask Task for setting up scheduling Interfaces ISchedule IScheduledEvent An event triggered by the scheduler module IScheduleForType<T> Interface for class providing scheduling mapping for a type"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.Interval-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.Interval-1.html",
    "title": "Class Interval<T> | DocFX Material",
    "keywords": "Class Interval<T> A scheduled interval Inheritance System.Object Interval<T> Implements ISchedule Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public class Interval<T> : object, ISchedule Type Parameters Name Description T the event type Properties | Improve this Doc View Source Payload The contents for this event type instance Declaration public T Payload { get; set; } Property Value Type Description T | Improve this Doc View Source Value The interval, in seconds Declaration public double Value { get; set; } Property Value Type Description System.Double Implements ISchedule"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.ISchedule.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.ISchedule.html",
    "title": "Interface ISchedule | DocFX Material",
    "keywords": "Interface ISchedule Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public interface ISchedule"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.IScheduledEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.IScheduledEvent.html",
    "title": "Interface IScheduledEvent | DocFX Material",
    "keywords": "Interface IScheduledEvent An event triggered by the scheduler module Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public interface IScheduledEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.IScheduleForType-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.IScheduleForType-1.html",
    "title": "Interface IScheduleForType<T> | DocFX Material",
    "keywords": "Interface IScheduleForType<T> Interface for class providing scheduling mapping for a type Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public interface IScheduleForType<T> where T : IScheduledEvent Type Parameters Name Description T the type to provide scheduling for Properties | Improve this Doc View Source Schedules Property for all configured schedules for a given type Declaration Dictionary<string, ISchedule> Schedules { get; } Property Value Type Description Dictionary < System.String , ISchedule >"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.NoScheduleConfiguredException.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.NoScheduleConfiguredException.html",
    "title": "Class NoScheduleConfiguredException | DocFX Material",
    "keywords": "Class NoScheduleConfiguredException Inheritance System.Object NoScheduleConfiguredException Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public class NoScheduleConfiguredException : Exception Constructors | Improve this Doc View Source NoScheduleConfiguredException(Type) Declaration public NoScheduleConfiguredException(Type type) Parameters Type Name Description Type type Properties | Improve this Doc View Source EventType Declaration public Type EventType { get; set; } Property Value Type Description Type"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.Pattern-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.Pattern-1.html",
    "title": "Class Pattern<T> | DocFX Material",
    "keywords": "Class Pattern<T> A scheduled pattern Inheritance System.Object Pattern<T> Implements ISchedule Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public class Pattern<T> : object, ISchedule Type Parameters Name Description T the event type Properties | Improve this Doc View Source Payload The contents for this event type instance Declaration public T Payload { get; set; } Property Value Type Description T | Improve this Doc View Source Value The cron pattern Declaration public string Value { get; set; } Property Value Type Description System.String Implements ISchedule"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.ScheduleAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.ScheduleAttribute.html",
    "title": "Class ScheduleAttribute | DocFX Material",
    "keywords": "Class ScheduleAttribute Attribute for creating a schedule from either an interval or a pattern Inheritance System.Object ScheduleAttribute Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public class ScheduleAttribute : Attribute Properties | Improve this Doc View Source Interval The interval to use Declaration public double Interval { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Pattern The cron pattern to use Declaration public string Pattern { get; set; } Property Value Type Description System.String"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.ScheduledJob-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.ScheduledJob-1.html",
    "title": "Class ScheduledJob<T> | DocFX Material",
    "keywords": "Class ScheduledJob<T> A scheduled jub Inheritance System.Object ScheduledJob<T> Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public class ScheduledJob<T> : IJob where T : IScheduledEvent Type Parameters Name Description T Constructors | Improve this Doc View Source ScheduledJob(EventHandler<T>, T) Creates an instance of ScheduledJob<T> Declaration public ScheduledJob(EventHandler<T> eventHandler, T instance) Parameters Type Name Description EventHandler <T> eventHandler T instance Methods | Improve this Doc View Source Execute(IJobExecutionContext) Run the job Declaration public Task Execute(IJobExecutionContext context) Parameters Type Name Description IJobExecutionContext context Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.Scheduling.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.Scheduling.html",
    "title": "Class Scheduling | DocFX Material",
    "keywords": "Class Scheduling Inheritance System.Object Scheduling Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public class Scheduling : Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.Scheduling.SchedulingTask.html": {
    "href": "api/RaaLabs.Edge.Modules.Scheduling.SchedulingTask.html",
    "title": "Class SchedulingTask | DocFX Material",
    "keywords": "Class SchedulingTask Task for setting up scheduling Inheritance System.Object SchedulingTask Implements IRunAsync Namespace : RaaLabs.Edge.Modules.Scheduling Assembly : RaaLabs.Edge.Modules.Scheduling.dll Syntax public class SchedulingTask : object, IRunAsync Constructors | Improve this Doc View Source SchedulingTask(ILifetimeScope, ILogger) Creates an instance of Declaration public SchedulingTask(ILifetimeScope scope, ILogger logger) Parameters Type Name Description ILifetimeScope scope ILogger logger Methods | Improve this Doc View Source Run() Start scheduler Declaration public Task Run() Returns Type Description Task | Improve this Doc View Source SetupSchedulingForType<T>() Setup scheduling for a class implementing IScheduledEvent Declaration public void SetupSchedulingForType<T>() where T : IScheduledEvent Type Parameters Name Description T Implements IRunAsync"
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.html",
    "title": "Namespace RaaLabs.Edge.Modules.Timescaledb | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Modules.Timescaledb Classes Timescaledb The module for registering the Timescaledb bridge for the application. TimescaledbClient<ConnectionType> TimescaledbConnectionAttribute Attribute for the Timescaledb connection class. All classes implementing ITimescaleDbOutgoingEvent should use this annotation. Interfaces ITimescaledbClient ITimescaledbClient<ConnectionType> ITimescaledbConnection ITimescaledbOutgoingEvent Marker interface for outgoing Timescaledb events."
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbClient.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbClient.html",
    "title": "Interface ITimescaledbClient | DocFX Material",
    "keywords": "Interface ITimescaledbClient Inherited Members ISenderClient<Object>.SendAsync(Object) IClient.Connect() Namespace : RaaLabs.Edge.Modules.Timescaledb Assembly : RaaLabs.Edge.Modules.Timescaledb.dll Syntax public interface ITimescaledbClient : ISenderClient<object>, IClient"
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbClient-1.html",
    "title": "Interface ITimescaledbClient<ConnectionType> | DocFX Material",
    "keywords": "Interface ITimescaledbClient<ConnectionType> Inherited Members ISenderClient<Object>.SendAsync(Object) IClient.Connect() Namespace : RaaLabs.Edge.Modules.Timescaledb Assembly : RaaLabs.Edge.Modules.Timescaledb.dll Syntax public interface ITimescaledbClient<ConnectionType> : ITimescaledbClient, ISenderClient<ConnectionType, object>, ISenderClient<object>, IClient<ConnectionType>, IClient where ConnectionType : ITimescaledbConnection Type Parameters Name Description ConnectionType"
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbConnection.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbConnection.html",
    "title": "Interface ITimescaledbConnection | DocFX Material",
    "keywords": "Interface ITimescaledbConnection Namespace : RaaLabs.Edge.Modules.Timescaledb Assembly : RaaLabs.Edge.Modules.Timescaledb.dll Syntax public interface ITimescaledbConnection : IClientConnection Properties | Improve this Doc View Source ConnectionString Declaration string ConnectionString { get; set; } Property Value Type Description System.String"
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbOutgoingEvent.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.ITimescaledbOutgoingEvent.html",
    "title": "Interface ITimescaledbOutgoingEvent | DocFX Material",
    "keywords": "Interface ITimescaledbOutgoingEvent Marker interface for outgoing Timescaledb events. Namespace : RaaLabs.Edge.Modules.Timescaledb Assembly : RaaLabs.Edge.Modules.Timescaledb.dll Syntax public interface ITimescaledbOutgoingEvent : IEvent"
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.Timescaledb.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.Timescaledb.html",
    "title": "Class Timescaledb | DocFX Material",
    "keywords": "Class Timescaledb The module for registering the Timescaledb bridge for the application. Inheritance System.Object Timescaledb Namespace : RaaLabs.Edge.Modules.Timescaledb Assembly : RaaLabs.Edge.Modules.Timescaledb.dll Syntax public class Timescaledb : Autofac.Module Methods | Improve this Doc View Source Load(ContainerBuilder) Declaration protected override void Load(ContainerBuilder builder) Parameters Type Name Description ContainerBuilder builder"
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.TimescaledbClient-1.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.TimescaledbClient-1.html",
    "title": "Class TimescaledbClient<ConnectionType> | DocFX Material",
    "keywords": "Class TimescaledbClient<ConnectionType> Inheritance System.Object TimescaledbClient<ConnectionType> Implements ITimescaledbClient <ConnectionType> ITimescaledbClient ISenderClient <ConnectionType, System.Object > ISenderClient < System.Object > IClient <ConnectionType> IClient Namespace : RaaLabs.Edge.Modules.Timescaledb Assembly : RaaLabs.Edge.Modules.Timescaledb.dll Syntax public class TimescaledbClient<ConnectionType> : object, ITimescaledbClient<ConnectionType>, ITimescaledbClient, ISenderClient<ConnectionType, object>, ISenderClient<object>, IClient<ConnectionType>, IClient where ConnectionType : ITimescaledbConnection Type Parameters Name Description ConnectionType Constructors | Improve this Doc View Source TimescaledbClient(ConnectionType) Declaration public TimescaledbClient(ConnectionType connection) Parameters Type Name Description ConnectionType connection Methods | Improve this Doc View Source Connect() Declaration public Task Connect() Returns Type Description Task | Improve this Doc View Source SendAsync(Object) Declaration public Task SendAsync(object data) Parameters Type Name Description System.Object data Returns Type Description Task Implements ITimescaledbClient<ConnectionType> ITimescaledbClient ISenderClient<ConnectionType, DataType> ISenderClient<DataType> IClient<ConnectionType> IClient"
  },
  "api/RaaLabs.Edge.Modules.Timescaledb.TimescaledbConnectionAttribute.html": {
    "href": "api/RaaLabs.Edge.Modules.Timescaledb.TimescaledbConnectionAttribute.html",
    "title": "Class TimescaledbConnectionAttribute | DocFX Material",
    "keywords": "Class TimescaledbConnectionAttribute Attribute for the Timescaledb connection class. All classes implementing ITimescaleDbOutgoingEvent should use this annotation. Inheritance System.Object TimescaledbConnectionAttribute Namespace : RaaLabs.Edge.Modules.Timescaledb Assembly : RaaLabs.Edge.Modules.Timescaledb.dll Syntax public class TimescaledbConnectionAttribute : Attribute Constructors | Improve this Doc View Source TimescaledbConnectionAttribute(Type) Declaration public TimescaledbConnectionAttribute(Type connection) Parameters Type Name Description Type connection Properties | Improve this Doc View Source Connection Declaration public Type Connection { get; } Property Value Type Description Type"
  },
  "api/RaaLabs.Edge.Serialization.html": {
    "href": "api/RaaLabs.Edge.Serialization.html",
    "title": "Namespace RaaLabs.Edge.Serialization | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Serialization Classes JsonDeserializer<Type> JsonSerializer<Type> Interfaces IDeserializer IDeserializer<Type> ISerializer ISerializer<Type>"
  },
  "api/RaaLabs.Edge.Serialization.IDeserializer.html": {
    "href": "api/RaaLabs.Edge.Serialization.IDeserializer.html",
    "title": "Interface IDeserializer | DocFX Material",
    "keywords": "Interface IDeserializer Namespace : RaaLabs.Edge.Serialization Assembly : RaaLabs.Edge.dll Syntax public interface IDeserializer"
  },
  "api/RaaLabs.Edge.Serialization.IDeserializer-1.html": {
    "href": "api/RaaLabs.Edge.Serialization.IDeserializer-1.html",
    "title": "Interface IDeserializer<Type> | DocFX Material",
    "keywords": "Interface IDeserializer<Type> Namespace : RaaLabs.Edge.Serialization Assembly : RaaLabs.Edge.dll Syntax public interface IDeserializer<out Type> : IDeserializer Type Parameters Name Description Type Methods | Improve this Doc View Source Deserialize(String) Declaration Type Deserialize(string toDeserialize) Parameters Type Name Description System.String toDeserialize Returns Type Description Type"
  },
  "api/RaaLabs.Edge.Serialization.ISerializer.html": {
    "href": "api/RaaLabs.Edge.Serialization.ISerializer.html",
    "title": "Interface ISerializer | DocFX Material",
    "keywords": "Interface ISerializer Namespace : RaaLabs.Edge.Serialization Assembly : RaaLabs.Edge.dll Syntax public interface ISerializer"
  },
  "api/RaaLabs.Edge.Serialization.ISerializer-1.html": {
    "href": "api/RaaLabs.Edge.Serialization.ISerializer-1.html",
    "title": "Interface ISerializer<Type> | DocFX Material",
    "keywords": "Interface ISerializer<Type> Namespace : RaaLabs.Edge.Serialization Assembly : RaaLabs.Edge.dll Syntax public interface ISerializer<in Type> : ISerializer Type Parameters Name Description Type Methods | Improve this Doc View Source Serialize(Type) Declaration string Serialize(Type toSerialize) Parameters Type Name Description Type toSerialize Returns Type Description System.String"
  },
  "api/RaaLabs.Edge.Serialization.JsonDeserializer-1.html": {
    "href": "api/RaaLabs.Edge.Serialization.JsonDeserializer-1.html",
    "title": "Class JsonDeserializer<Type> | DocFX Material",
    "keywords": "Class JsonDeserializer<Type> Inheritance System.Object JsonDeserializer<Type> Implements IDeserializer <Type> IDeserializer Namespace : RaaLabs.Edge.Serialization Assembly : RaaLabs.Edge.dll Syntax public class JsonDeserializer<Type> : object, IDeserializer<Type>, IDeserializer Type Parameters Name Description Type Methods | Improve this Doc View Source Deserialize(String) Declaration public Type Deserialize(string toDeserialize) Parameters Type Name Description System.String toDeserialize Returns Type Description Type Implements IDeserializer<Type> IDeserializer"
  },
  "api/RaaLabs.Edge.Serialization.JsonSerializer-1.html": {
    "href": "api/RaaLabs.Edge.Serialization.JsonSerializer-1.html",
    "title": "Class JsonSerializer<Type> | DocFX Material",
    "keywords": "Class JsonSerializer<Type> Inheritance System.Object JsonSerializer<Type> Implements ISerializer <Type> ISerializer Namespace : RaaLabs.Edge.Serialization Assembly : RaaLabs.Edge.dll Syntax public class JsonSerializer<Type> : object, ISerializer<Type>, ISerializer Type Parameters Name Description Type Methods | Improve this Doc View Source Serialize(Type) Declaration public string Serialize(Type toSerialize) Parameters Type Name Description Type toSerialize Returns Type Description System.String Implements ISerializer<Type> ISerializer"
  },
  "api/RaaLabs.Edge.Status.html": {
    "href": "api/RaaLabs.Edge.Status.html",
    "title": "Enum Status | DocFX Material",
    "keywords": "Enum Status The bootloader status. Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public enum Status : int Fields Name Description Complete The bootloader has finished running. Ready The bootloader is ready to run. Waiting The bootloader is waiting for another bootloader to finish."
  },
  "api/RaaLabs.Edge.TaskHelpers.html": {
    "href": "api/RaaLabs.Edge.TaskHelpers.html",
    "title": "Class TaskHelpers | DocFX Material",
    "keywords": "Class TaskHelpers Inheritance System.Object TaskHelpers Namespace : RaaLabs.Edge Assembly : RaaLabs.Edge.dll Syntax public static class TaskHelpers : object Methods | Improve this Doc View Source WhenAllRethrowExceptions(IEnumerable<Task>) Declaration public static Task WhenAllRethrowExceptions(IEnumerable<Task> tasks) Parameters Type Name Description IEnumerable < Task > tasks Returns Type Description Task | Improve this Doc View Source WhenAllRethrowExceptions(Task[]) Declaration public static Task WhenAllRethrowExceptions(params Task[] tasks) Parameters Type Name Description Task [] tasks Returns Type Description Task | Improve this Doc View Source WhenAllWithLoggedExceptions(ILogger, IEnumerable<Task>, String, Int32) Declaration public static Task WhenAllWithLoggedExceptions(ILogger logger, IEnumerable<Task> tasks, string fileName = \"\", int lineNumber = 0) Parameters Type Name Description ILogger logger IEnumerable < Task > tasks System.String fileName System.Int32 lineNumber Returns Type Description Task"
  },
  "api/RaaLabs.Edge.Testing.ApplicationContext.html": {
    "href": "api/RaaLabs.Edge.Testing.ApplicationContext.html",
    "title": "Class ApplicationContext | DocFX Material",
    "keywords": "Class ApplicationContext Inheritance System.Object ApplicationContext Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public class ApplicationContext : object Constructors | Improve this Doc View Source ApplicationContext() Declaration public ApplicationContext() Properties | Improve this Doc View Source Application Declaration public Application Application { get; } Property Value Type Description Application | Improve this Doc View Source ApplicationBuilder Declaration public TestApplicationBuilder ApplicationBuilder { get; } Property Value Type Description TestApplicationBuilder | Improve this Doc View Source Instances Declaration public IDictionary<string, object> Instances { get; } Property Value Type Description IDictionary < System.String , System.Object > | Improve this Doc View Source Scope Declaration public ILifetimeScope Scope { get; } Property Value Type Description ILifetimeScope Methods | Improve this Doc View Source Build() Declaration public void Build() | Improve this Doc View Source FromTable(Table, TypeMapping) Declaration public static ApplicationContext FromTable(Table table, TypeMapping typeMapping) Parameters Type Name Description Table table TypeMapping typeMapping Returns Type Description ApplicationContext | Improve this Doc View Source ResolveInstance(String, Type) Declaration public object ResolveInstance(string name, Type type) Parameters Type Name Description System.String name Type type Returns Type Description System.Object | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source StartScope() Declaration public ILifetimeScope StartScope() Returns Type Description ILifetimeScope | Improve this Doc View Source WithEventType<T>() Declaration public void WithEventType<T>() where T : IEvent Type Parameters Name Description T | Improve this Doc View Source WithHandler<T>() Declaration public void WithHandler<T>() Type Parameters Name Description T | Improve this Doc View Source WithInstance<T>(T) Declaration public void WithInstance<T>(T instance) where T : class Parameters Type Name Description T instance Type Parameters Name Description T | Improve this Doc View Source WithMock<T>(Mock<T>) Declaration public void WithMock<T>(Mock<T> mocked) where T : class Parameters Type Name Description Mock <T> mocked Type Parameters Name Description T | Improve this Doc View Source WithModule<T>() Declaration public void WithModule<T>() where T : IModule, new() Type Parameters Name Description T | Improve this Doc View Source WithSingletonType<T>() Declaration public void WithSingletonType<T>() where T : new() Type Parameters Name Description T | Improve this Doc View Source WithTestModule<T>() Declaration public void WithTestModule<T>() where T : IModule, new() Type Parameters Name Description T | Improve this Doc View Source WithType<T>() Declaration public void WithType<T>() where T : new() Type Parameters Name Description T"
  },
  "api/RaaLabs.Edge.Testing.ApplicationSteps.html": {
    "href": "api/RaaLabs.Edge.Testing.ApplicationSteps.html",
    "title": "Class ApplicationSteps | DocFX Material",
    "keywords": "Class ApplicationSteps A class defining steps for building an application context Inheritance System.Object ApplicationSteps Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public sealed class ApplicationSteps : object Constructors | Improve this Doc View Source ApplicationSteps(IObjectContainer, TypeMapping) Declaration public ApplicationSteps(IObjectContainer container, TypeMapping typeMapping) Parameters Type Name Description IObjectContainer container TypeMapping typeMapping Methods | Improve this Doc View Source GivenAnApplicationWithTheFollowingRegistrations(Table) Declaration public void GivenAnApplicationWithTheFollowingRegistrations(Table table) Parameters Type Name Description Table table | Improve this Doc View Source GivenTheApplicationIsRunning() Declaration public void GivenTheApplicationIsRunning() | Improve this Doc View Source ThenTheFollowingEventsAreProduced(Table) Declaration public void ThenTheFollowingEventsAreProduced(Table table) Parameters Type Name Description Table table | Improve this Doc View Source ThenTheFollowingEventsAreProducedInAnyOrder(Table) Declaration public void ThenTheFollowingEventsAreProducedInAnyOrder(Table table) Parameters Type Name Description Table table | Improve this Doc View Source WhenTheFollowingEventsAreProduced(Table) Declaration public void WhenTheFollowingEventsAreProduced(Table table) Parameters Type Name Description Table table"
  },
  "api/RaaLabs.Edge.Testing.ClientSteps.html": {
    "href": "api/RaaLabs.Edge.Testing.ClientSteps.html",
    "title": "Class ClientSteps | DocFX Material",
    "keywords": "Class ClientSteps A class defining steps for dealing with clients Inheritance System.Object ClientSteps Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public sealed class ClientSteps : object Constructors | Improve this Doc View Source ClientSteps(IObjectContainer, TypeMapping) Declaration public ClientSteps(IObjectContainer container, TypeMapping typeMapping) Parameters Type Name Description IObjectContainer container TypeMapping typeMapping Methods | Improve this Doc View Source GivenTheFollowingClientMocks(Table) Declaration public void GivenTheFollowingClientMocks(Table table) Parameters Type Name Description Table table | Improve this Doc View Source ThenClientsSendTheFollowingData(Table) Declaration public void ThenClientsSendTheFollowingData(Table table) Parameters Type Name Description Table table | Improve this Doc View Source ThenClientsWillSubscribeToTheFollowingTopics(Table) Declaration public void ThenClientsWillSubscribeToTheFollowingTopics(Table table) Parameters Type Name Description Table table | Improve this Doc View Source ThenTheFollowingClientsWillBeConnected(Table) Declaration public void ThenTheFollowingClientsWillBeConnected(Table table) Parameters Type Name Description Table table | Improve this Doc View Source WhenClientsReceiveTheFollowingData(Table) Declaration public void WhenClientsReceiveTheFollowingData(Table table) Parameters Type Name Description Table table"
  },
  "api/RaaLabs.Edge.Testing.ComponentAssemblies.html": {
    "href": "api/RaaLabs.Edge.Testing.ComponentAssemblies.html",
    "title": "Class ComponentAssemblies | DocFX Material",
    "keywords": "Class ComponentAssemblies A class holding all assemblies to perform component scan on Inheritance System.Object ComponentAssemblies Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public class ComponentAssemblies : HashSet<Assembly> Constructors | Improve this Doc View Source ComponentAssemblies() Declaration public ComponentAssemblies()"
  },
  "api/RaaLabs.Edge.Testing.ContextProvider.html": {
    "href": "api/RaaLabs.Edge.Testing.ContextProvider.html",
    "title": "Class ContextProvider | DocFX Material",
    "keywords": "Class ContextProvider Class setting up context from scanned assemblies Inheritance System.Object ContextProvider Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public sealed class ContextProvider : object Constructors | Improve this Doc View Source ContextProvider(IObjectContainer, ComponentAssemblies) Declaration public ContextProvider(IObjectContainer container, ComponentAssemblies assemblies) Parameters Type Name Description IObjectContainer container ComponentAssemblies assemblies Methods | Improve this Doc View Source RegisterClassesFromAssemblies() Declaration public void RegisterClassesFromAssemblies() | Improve this Doc View Source RegisterEventInstanceFactories(IEnumerable<Type>) Scan assemblies for implementations of IEventInstanceFactory, and register each of these types into the test context. Declaration public void RegisterEventInstanceFactories(IEnumerable<Type> allTypes) Parameters Type Name Description IEnumerable < Type > allTypes a list of all types found in scanned assemblies | Improve this Doc View Source RegisterProducedEventVerifiers(IEnumerable<Type>) Scan assemblies for implementations of IProducedEventVerifier, and register each of these types into the test context. Declaration public void RegisterProducedEventVerifiers(IEnumerable<Type> allTypes) Parameters Type Name Description IEnumerable < Type > allTypes a list of all types found in scanned assemblies | Improve this Doc View Source RegisterProducedEventVerifiersFullTable(IEnumerable<Type>) Scan assemblies for implementations of IProducedEventVerifierFullTable, and register each of these types into the test context. Declaration public void RegisterProducedEventVerifiersFullTable(IEnumerable<Type> allTypes) Parameters Type Name Description IEnumerable < Type > allTypes a list of all types found in scanned assemblies"
  },
  "api/RaaLabs.Edge.Testing.Exceptions.EventInstanceFactoryNotRegisteredException.html": {
    "href": "api/RaaLabs.Edge.Testing.Exceptions.EventInstanceFactoryNotRegisteredException.html",
    "title": "Class EventInstanceFactoryNotRegisteredException | DocFX Material",
    "keywords": "Class EventInstanceFactoryNotRegisteredException This class will be thrown if none of the scanned assemblies contains a class implementing IEventInstanceFactory. Inheritance System.Object EventInstanceFactoryNotRegisteredException Namespace : RaaLabs.Edge.Testing.Exceptions Assembly : RaaLabs.Edge.Testing.dll Syntax public class EventInstanceFactoryNotRegisteredException : Exception Constructors | Improve this Doc View Source EventInstanceFactoryNotRegisteredException(Type) Declaration public EventInstanceFactoryNotRegisteredException(Type type) Parameters Type Name Description Type type Properties | Improve this Doc View Source Type The event type the IEventInstanceFactory class should construct Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/RaaLabs.Edge.Testing.Exceptions.html": {
    "href": "api/RaaLabs.Edge.Testing.Exceptions.html",
    "title": "Namespace RaaLabs.Edge.Testing.Exceptions | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Testing.Exceptions Classes EventInstanceFactoryNotRegisteredException This class will be thrown if none of the scanned assemblies contains a class implementing IEventInstanceFactory. ProducedEventVerifierNotRegisteredException This class will be thrown if none of the scanned assemblies contains a class implementing IProducedEventVerifier."
  },
  "api/RaaLabs.Edge.Testing.Exceptions.ProducedEventVerifierNotRegisteredException.html": {
    "href": "api/RaaLabs.Edge.Testing.Exceptions.ProducedEventVerifierNotRegisteredException.html",
    "title": "Class ProducedEventVerifierNotRegisteredException | DocFX Material",
    "keywords": "Class ProducedEventVerifierNotRegisteredException This class will be thrown if none of the scanned assemblies contains a class implementing IProducedEventVerifier. Inheritance System.Object ProducedEventVerifierNotRegisteredException Namespace : RaaLabs.Edge.Testing.Exceptions Assembly : RaaLabs.Edge.Testing.dll Syntax public class ProducedEventVerifierNotRegisteredException : Exception Constructors | Improve this Doc View Source ProducedEventVerifierNotRegisteredException(Type) Declaration public ProducedEventVerifierNotRegisteredException(Type type) Parameters Type Name Description Type type Properties | Improve this Doc View Source Type The event type the IProducedEventVerifier class should verify Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api/RaaLabs.Edge.Testing.HandlerSteps.html": {
    "href": "api/RaaLabs.Edge.Testing.HandlerSteps.html",
    "title": "Class HandlerSteps | DocFX Material",
    "keywords": "Class HandlerSteps A class defining steps for testing a handler Inheritance System.Object HandlerSteps Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public sealed class HandlerSteps : object Constructors | Improve this Doc View Source HandlerSteps(IObjectContainer, TypeMapping) Declaration public HandlerSteps(IObjectContainer container, TypeMapping typeMapping) Parameters Type Name Description IObjectContainer container TypeMapping typeMapping Methods | Improve this Doc View Source GivenAHandlerOfType(String) Declaration public void GivenAHandlerOfType(string typename) Parameters Type Name Description System.String typename The name of the handler type. This is the name of the type in the TypeMapping class | Improve this Doc View Source HandleEvent<T>(T) Function called when an event is triggered within the handler. This function can be ignored by the developer. IMPORTANT: This function appears to not be in use, but will be called at runtime using reflection. Declaration public void HandleEvent<T>(T event) where T : IEvent Parameters Type Name Description T event Type Parameters Name Description T | Improve this Doc View Source HandleEventsFromTable<T>(Table) Function called to simulate incoming events to the handler. This function can be ignored by the developer. IMPORTANT: This function appears to not be in use, but will be called at runtime using reflection. Declaration public void HandleEventsFromTable<T>(Table table) where T : IEvent Parameters Type Name Description Table table Type Parameters Name Description T | Improve this Doc View Source ThenTheFollowingEventsOfTypeIsProduced(String, Table) Declaration public void ThenTheFollowingEventsOfTypeIsProduced(string typename, Table table) Parameters Type Name Description System.String typename The name of the event type. This is the name of the type in the TypeMapping class Table table A table containing parameters for verifying the produced event. An ProducedEventVerifier must be implemented for this type | Improve this Doc View Source VerifyEventsProducedFromTable<T>(Table) Function called to verify outgoing events from the handler. This function can be ignored by the developer. IMPORTANT: This function appears to not be in use, but will be called at runtime using reflection. Declaration public void VerifyEventsProducedFromTable<T>(Table table) where T : IEvent Parameters Type Name Description Table table Type Parameters Name Description T | Improve this Doc View Source WhenTheFollowingEventsOfTypeIsProduced(String, Table) Declaration public void WhenTheFollowingEventsOfTypeIsProduced(string typename, Table table) Parameters Type Name Description System.String typename The name of the event type. This is the name of the type in the TypeMapping class Table table A table containing the parameters for constructing the events. An EventInstanceFactory must be implemented for this type"
  },
  "api/RaaLabs.Edge.Testing.html": {
    "href": "api/RaaLabs.Edge.Testing.html",
    "title": "Namespace RaaLabs.Edge.Testing | DocFX Material",
    "keywords": "Namespace RaaLabs.Edge.Testing Classes ApplicationContext ApplicationSteps A class defining steps for building an application context ClientSteps A class defining steps for dealing with clients ComponentAssemblies A class holding all assemblies to perform component scan on ContextProvider Class setting up context from scanned assemblies HandlerSteps A class defining steps for testing a handler LoggerProvider A helper class for adding a logger to the container context TestApplicationBuilder An application builder for testing purposes. TestingMiddlewareSource A middleware source returning a mocked interface if the mock has been registered. TypeMapping A dictionary for getting a type from a string representation of said type. The developer is responsible for populating the dictionary with the types used in the test."
  },
  "api/RaaLabs.Edge.Testing.LoggerProvider.html": {
    "href": "api/RaaLabs.Edge.Testing.LoggerProvider.html",
    "title": "Class LoggerProvider | DocFX Material",
    "keywords": "Class LoggerProvider A helper class for adding a logger to the container context Inheritance System.Object LoggerProvider Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public sealed class LoggerProvider : object Constructors | Improve this Doc View Source LoggerProvider(IObjectContainer) Declaration public LoggerProvider(IObjectContainer container) Parameters Type Name Description IObjectContainer container Methods | Improve this Doc View Source SetupLogger() Declaration public void SetupLogger()"
  },
  "api/RaaLabs.Edge.Testing.TestApplicationBuilder.html": {
    "href": "api/RaaLabs.Edge.Testing.TestApplicationBuilder.html",
    "title": "Class TestApplicationBuilder | DocFX Material",
    "keywords": "Class TestApplicationBuilder An application builder for testing purposes. Inheritance System.Object ApplicationBuilder TestApplicationBuilder Inherited Members ApplicationBuilder._builder ApplicationBuilder._handlers ApplicationBuilder._assemblies ApplicationBuilder.WithModule<TModule>() ApplicationBuilder.WithHandler<THandler>() ApplicationBuilder.WithType<T>() ApplicationBuilder.WithSingletonType<T, I>() ApplicationBuilder.WithSingletonType<T>() ApplicationBuilder.WithTask<Task>() ApplicationBuilder.WithSerializerDeserializer<T>(Type[]) RaaLabs.Edge.ApplicationBuilder.WithManualRegistration(Action<>) ApplicationBuilder.WithAllImplementationsOf<I>() ApplicationBuilder.WithAssembly(Assembly) Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public class TestApplicationBuilder : ApplicationBuilder Methods | Improve this Doc View Source Build() Build the application. Declaration public override Application Build() Returns Type Description Application The application containing all tasks and handlers to start up Overrides ApplicationBuilder.Build() | Improve this Doc View Source WithEventType<TEvent>() Register an event type for the application. Declaration public ApplicationBuilder WithEventType<TEvent>() where TEvent : IEvent Returns Type Description ApplicationBuilder Type Parameters Name Description TEvent The event type to register | Improve this Doc View Source WithMock<MockedType>(Mock<MockedType>) Register a mocked type for the application. Declaration public ApplicationBuilder WithMock<MockedType>(Mock<MockedType> mocked) where MockedType : class Parameters Type Name Description Mock <MockedType> mocked Returns Type Description ApplicationBuilder Type Parameters Name Description MockedType The type to mock | Improve this Doc View Source WithTestModule<TModule>() Register an Autofac module for the application. Declaration public ApplicationBuilder WithTestModule<TModule>() where TModule : Autofac.Core.IModule, new() Returns Type Description ApplicationBuilder Type Parameters Name Description TModule The module to register Extension Methods ApplicationBuilderExtensions.WithMqttBroker<T>(ApplicationBuilder)"
  },
  "api/RaaLabs.Edge.Testing.TestingMiddlewareSource.html": {
    "href": "api/RaaLabs.Edge.Testing.TestingMiddlewareSource.html",
    "title": "Class TestingMiddlewareSource | DocFX Material",
    "keywords": "Class TestingMiddlewareSource A middleware source returning a mocked interface if the mock has been registered. Inheritance System.Object TestingMiddlewareSource Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public class TestingMiddlewareSource : IServiceMiddlewareSource Constructors | Improve this Doc View Source TestingMiddlewareSource(Dictionary<Type, Mock>) Declaration public TestingMiddlewareSource(Dictionary<Type, Mock> mocks) Parameters Type Name Description Dictionary < Type , Mock > mocks Methods | Improve this Doc View Source ProvideMiddleware(Service, IComponentRegistryServices, IResolvePipelineBuilder) Declaration public void ProvideMiddleware(Service service, IComponentRegistryServices availableServices, IResolvePipelineBuilder pipelineBuilder) Parameters Type Name Description Service service IComponentRegistryServices availableServices IResolvePipelineBuilder pipelineBuilder"
  },
  "api/RaaLabs.Edge.Testing.TypeMapping.html": {
    "href": "api/RaaLabs.Edge.Testing.TypeMapping.html",
    "title": "Class TypeMapping | DocFX Material",
    "keywords": "Class TypeMapping A dictionary for getting a type from a string representation of said type. The developer is responsible for populating the dictionary with the types used in the test. Inheritance System.Object TypeMapping Namespace : RaaLabs.Edge.Testing Assembly : RaaLabs.Edge.Testing.dll Syntax public class TypeMapping : Dictionary<string, Type> Constructors | Improve this Doc View Source TypeMapping() Declaration public TypeMapping()"
  },
  "articles/Edge.Modules.Configuration.README.html": {
    "href": "articles/Edge.Modules.Configuration.README.html",
    "title": "Configuration | DocFX Material",
    "keywords": "Configuration This document describes the Configuration module for the RaaLabs Edge framework. What does it do? This module eases loading of configuration files into the application. Concepts Configuration interface Classes implementing this interface will be instantiated in the application by loading the file specified in the Name attribute for the class. The properties of the class will be used during deserialization. If the configuration class has a RestartOnChange attribute, it will trigger an application restart when the configuration file is changed on disk. Here is an example of a configuration file, a configuration class, and a class depending on the configuration: { \"someValue\": \"current value\" } [Name(\"someconfiguration.json\")] [RestartOnChange] class SomeConfiguration : IConfiguration { public string SomeValue { get; set; } } class SomeTask : IRunAsync { private readonly SomeConfiguration _config; public SomeTask(SomeConfiguration config) { _config = config; } public async Task Run() { while(true) { Console.WriteLine($\"Value: {_config.SomeValue}\"}); await Task.Delay(1000); } } }"
  },
  "articles/Edge.Modules.EdgeHub.README.html": {
    "href": "articles/Edge.Modules.EdgeHub.README.html",
    "title": "EdgeHub | DocFX Material",
    "keywords": "EdgeHub This document describes the EdgeHub module for the RaaLabs Edge framework. What does it do? This module creates a bridge to the EdgeHub event broker, allowing you to map EdgeHub inputs and outputs to EventHandling events. Concepts Incoming events To receive a specific input from EdgeHub, you should create an event class implementing the IEdgeHubIncomingEvent interface. This class should have the attribute InputName set to the name of the input to listen to. The class will be used for deserialization, so it should contain all properties to be deserialized from the incoming payload. The EdgeHub client will publish incoming events for the specified input, to the event topic. Handlers will then be able to subscribe to this event like any other event. Here is an example of an EdgeHub input, plus an event consumer for the input: [InputName(\"SomeIncomingEvent\")] class SomeIncomingEvent : IEdgeHubIncomingEvent { public string Tag { get; set; } public string Value { get; set; } } class IncomingEventHandler : IConsumeEvent<SomeIncomingEvent> { public void Handle(SomeIncomingEvent ev) { // Do something } } Outgoing events To send a specific input to EdgeHub, you should create an event class implementing the IEdgeHubOutgoingEvent interface. This class should have the attribute OutputName set to the name of the output to send to. The class will be used for serialization, so it should contain all properties to be serialized to EdgeHub. Handlers will be able to emit this event like any other. The EdgeHub client will consume events from the event topic, to the specified output. Here is an example of an EdgeHub output, plus an event producer for the output: [OutputName(\"SomeOutgoingEvent\")] class SomeOutgoingEvent : IEdgeHubOutgoingEvent { public string Tag { get; set; } public string Value { get; set; } } class OutgoingEventProducer: IRunAsync, IProduceEvent<SomeOutgoingEvent> { public event EventEmitter<SomeOutgoingEvent> SendEvent; public async Task Run() { while(true) { var ev = new SomeOutgoingEvent { Tag = \"test\", Value = \"value\" }; SendEvent(ev); await Task.Delay(1000); } } }"
  },
  "articles/Edge.Modules.EventHandling.README.html": {
    "href": "articles/Edge.Modules.EventHandling.README.html",
    "title": "Event Handling | DocFX Material",
    "keywords": "Event Handling This document describes the EventHandling module for the RaaLabs Edge framework. What does it do? This module provides the application with an event handling backbone. This allows components within the application to subscribe and consume events. This allows for a loose coupling between components. Concepts Event class This class is responsible for carrying the payload of the event. It also doubles as the event \"topic\". All event classes must implement the IEvent interface, either directly or indirectly through other interfaces. Here is an example of an event class: class SomethingHappened : IEvent { public string What { get; set; } } Event Producer When a class implements the IProduceEvent<T> interface, it tells the Event Handling module that it produces events of the T event type. The Event Handling module will expect the class to contain a delegate function with type signature EventEmitter<T> , which will be called whenever a new event of type T is produced. If the Event Handling module cannot find this delegate function, it will throw an exception and the application will not start. Here is an example of an event producer class: class SomethingHappenedProducer : IRunAsync, IProduceEvent<SomethingHappened> { public event EventEmitter<SomethingHappened> SendSomethingHappenedEvent; public SomethingHappenedProducer() { } public async Task Run() { while(true) { var newEvent = new SomethingHappened { What = \"Carrying on...\" }; SendSomethingHappenedEvent(newEvent); await Task.Delay(1000); } } } Event Consumer When a class implements the IConsumeEvent<T> interface, it tells the Event Handling module that it consumes events of the T event type. This interface contains a void Handle(T ev) function, which will be called in all consumers of an event type whenever a new event of the given type is produced. Here is an example of an event consumer class: class SomethingHappenedConsumer : IConsumeEvent<SomethingHappened> { public void Handle(SomethingHappened ev) { // Process event here } } Event Handler Every event type has an Event Handler registered in the Autofac context, which is used internally to handle the \"plumbing\" from an event is produced, until it is consumed. For normal use of the framework, the developer can ignore this concept."
  },
  "articles/Edge.Modules.EventHub.README.html": {
    "href": "articles/Edge.Modules.EventHub.README.html",
    "title": "EventHub | DocFX Material",
    "keywords": "EventHub This document describes the EventHub module for the RaaLabs Edge framework. What does it do? This module creates a bridge to the EventHub event broker, allowing you to map EventHub inputs and outputs to EventHandling events. Configuration All EventHubs to connect to should have an environment variable \"<EVENT_HUB_NAME>_CONNECTION_STRING\" set to a valid connection string for that EventHub. Concepts Incoming events To receive a specific input from EventHub, you should create an event class implementing the IEventHubIncomingEvent interface. This class should have the attribute EdgeHubName set to the name of the EdgeHub to listen to. The class will be used for deserialization, so it should contain all properties to be deserialized from the incoming payload. The EventHub client will publish incoming events for the specified input, to the event topic. Handlers will then be able to subscribe to this event like any other event. Here is an example of an EventHub input, plus an event consumer for the input: [EventHubName(\"eventhubone\")] class SomeIncomingEvent : IEventHubIncomingEvent { public string Tag { get; set; } public string Value { get; set; } } class IncomingEventHandler : IConsumeEvent<SomeIncomingEvent> { public void Handle(SomeIncomingEvent ev) { // Do something } } Outgoing events To send a specific input to EventHub, you should create an event class implementing the IEventHubOutgoingEvent interface. This class should have the attribute EventHubName set to the name of the EventHub to send to. The class will be used for serialization, so it should contain all properties to be serialized to EventHub. Handlers will be able to emit this event like any other. The EventHub client will consume events from the event topic, to the specified output. Here is an example of an EventHub output, plus an event producer for the output: [EventHubName(\"eventhubone\")] class SomeOutgoingEvent : IEventHubOutgoingEvent { public string Tag { get; set; } public string Value { get; set; } } class OutgoingEventProducer: IRunAsync, IProduceEvent<SomeOutgoingEvent> { public event EventEmitter<SomeOutgoingEvent> SendEvent; public async Task Run() { while(true) { var ev = new SomeOutgoingEvent { Tag = \"test\", Value = \"value\" }; SendEvent(ev); await Task.Delay(1000); } } }"
  },
  "articles/Edge.Modules.IotHub.README.html": {
    "href": "articles/Edge.Modules.IotHub.README.html",
    "title": "IotHub | DocFX Material",
    "keywords": "IotHub This document describes the IotHub module for the RaaLabs Edge framework. What does it do? This module creates a bridge to the IotHub event broker, allowing you to map IotHub inputs and outputs to EventHandling events. Configuration All IotHubs to connect to should have an environment variable \"<IOT_HUB_NAME>_CONNECTION_STRING\" set to a valid connection string for that IotHub. Concepts Incoming events To receive a specific input from IotHub, you should create an event class implementing the IIotHubIncomingEvent interface. This class should have the attribute IotHubName set to the name of the IotHub to listen to. The class will be used for deserialization, so it should contain all properties to be deserialized from the incoming payload. The IotHub client will publish incoming events for the specified input, to the event topic. Handlers will then be able to subscribe to this event like any other event. Here is an example of an IotHub input, plus an event consumer for the input: [IotHubName(\"iothubone\")] class SomeIncomingEvent : IIotHubIncomingEvent { public string Tag { get; set; } public string Value { get; set; } } class IncomingEventHandler : IConsumeEvent<SomeIncomingEvent> { public void Handle(SomeIncomingEvent ev) { // Do something } } Outgoing events To send a specific input to IotHub, you should create an event class implementing the IIotHubOutgoingEvent interface. This class should have the attribute IotHubName set to the name of the IotHub to send to. The class will be used for serialization, so it should contain all properties to be serialized to IotHub. Handlers will be able to emit this event like any other. The IotHub client will consume events from the event topic, to the specified output. Here is an example of an IotHub output, plus an event producer for the output: [IotHubName(\"iothubone\")] class SomeOutgoingEvent : IIotHubOutgoingEvent { public string Tag { get; set; } public string Value { get; set; } } class OutgoingEventProducer: IRunAsync, IProduceEvent<SomeOutgoingEvent> { public event EventEmitter<SomeOutgoingEvent> SendEvent; public async Task Run() { while(true) { var ev = new SomeOutgoingEvent { Tag = \"test\", Value = \"value\" }; SendEvent(ev); await Task.Delay(1000); } } }"
  },
  "articles/Edge.Modules.Mqtt.README.html": {
    "href": "articles/Edge.Modules.Mqtt.README.html",
    "title": "IotHub | DocFX Material",
    "keywords": "IotHub This document describes the IotHub module for the RaaLabs Edge framework. What does it do? This module creates a bridge to the IotHub event broker, allowing you to map IotHub inputs and outputs to EventHandling events. Configuration All IotHubs to connect to should have an environment variable \"<IOT_HUB_NAME>_CONNECTION_STRING\" set to a valid connection string for that IotHub. Concepts Incoming events To receive a specific input from IotHub, you should create an event class implementing the IIotHubIncomingEvent interface. This class should have the attribute IotHubName set to the name of the IotHub to listen to. The class will be used for deserialization, so it should contain all properties to be deserialized from the incoming payload. The IotHub client will publish incoming events for the specified input, to the event topic. Handlers will then be able to subscribe to this event like any other event. Here is an example of an IotHub input, plus an event consumer for the input: [IotHubName(\"iothubone\")] class SomeIncomingEvent : IIotHubIncomingEvent { public string Tag { get; set; } public string Value { get; set; } } class IncomingEventHandler : IConsumeEvent<SomeIncomingEvent> { public void Handle(SomeIncomingEvent ev) { // Do something } } Outgoing events To send a specific input to IotHub, you should create an event class implementing the IIotHubOutgoingEvent interface. This class should have the attribute IotHubName set to the name of the IotHub to send to. The class will be used for serialization, so it should contain all properties to be serialized to IotHub. Handlers will be able to emit this event like any other. The IotHub client will consume events from the event topic, to the specified output. Here is an example of an IotHub output, plus an event producer for the output: [IotHubName(\"iothubone\")] class SomeOutgoingEvent : IIotHubOutgoingEvent { public string Tag { get; set; } public string Value { get; set; } } class OutgoingEventProducer: IRunAsync, IProduceEvent<SomeOutgoingEvent> { public event EventEmitter<SomeOutgoingEvent> SendEvent; public async Task Run() { while(true) { var ev = new SomeOutgoingEvent { Tag = \"test\", Value = \"value\" }; SendEvent(ev); await Task.Delay(1000); } } }"
  },
  "articles/Edge.Modules.Scheduling.README.html": {
    "href": "articles/Edge.Modules.Scheduling.README.html",
    "title": "Scheduling | DocFX Material",
    "keywords": "Scheduling This document describes the Scheduling module for the RaaLabs Edge framework. What does it do? This module provides the application with the ability to schedule events through the Event Handling system. How to use A scheduled event must implement the IScheduledEvent interface. There are two ways of configuring a scheduled event: Adding a Schedule attribute to the class definition Adding a type implementing the IScheduleForType<T> interface, where T is the event type Configuration using Schedule attribute The schedule attribute is a simple way to configure the event to trigger. The attribute can contain either a scheduling pattern (using cron format), or a scheduling interval. Here is an example of an event triggered with a cron pattern: [Schedule(Pattern = \"*/1 * * * * ?\")] public class CronEvent : IScheduledEvent { } Here is an example of an event triggered with an interval of 0.25 (four times a second): [Schedule(Interval = 0.25)] public class CronEvent : IScheduledEvent { } Configuration using IScheduleForType<T> interface This way of setting up scheduling allows for more advanced configuration, like for example configuring schedules from a configuration file. It is also currently the only schedule setup type that allows schedule events with payloads. A class implementing IScheduleForType<T> must implement the Schedules property, which will return a dictionary containing the actual schedules. Each entry in this dictionary can be either a Interval<T> or a Pattern<T> type, each containing required information for the schedule type. Here is a full example for using this type of schedule setup: public class ScheduleConfig : IScheduleForType<TypeScheduledEvent> { private Dictionary<string, ISchedule> _schedules; // by depending on a configuration file here, you could build up _schedules // from the fields in the configuration file. public ScheduleConfig() { _schedules = new Dictionary<string, ISchedule> { { \"onceASecond\", new Pattern<TypeScheduledEvent>{ Value = \"*/1 * * * * ?\", Payload = new TypeScheduledEvent { Tags = new List<string>{ \"tag-1\", \"tag-2\" } } } }, { \"fourTimesASecond\", new Interval<TypeScheduledEvent>{ Value = 0.25, Payload = new TypeScheduledEvent { Tags = new List<string>{ \"tag-3\", \"tag-4\" } } } } }; } public Dictionary<string, ISchedule> Schedules => _schedules; } public class TypeScheduledEvent : IScheduledEvent { public List<string> Tags { get; set; } }"
  },
  "articles/Edge.Modules.Timescaledb.README.html": {
    "href": "articles/Edge.Modules.Timescaledb.README.html",
    "title": "Timescaledb | DocFX Material",
    "keywords": "Timescaledb"
  },
  "articles/Edge.README.html": {
    "href": "articles/Edge.README.html",
    "title": "| DocFX Material",
    "keywords": ""
  },
  "articles/Edge.Testing.README.html": {
    "href": "articles/Edge.Testing.README.html",
    "title": "EdgeHub Testing | DocFX Material",
    "keywords": "EdgeHub Testing This document describes the Testing module for the RaaLabs Edge framework. What does it do? This module provides the developer with common functionality useful across projects. This includes Specflow bindings for testing handlers. Handler bindings The HandlerSteps class provides bindings to SpecFlow for testing the mapping from input events to output events for a given handler class. The setup is a bit extensive, so we'll go through all the requirements here: SpecFlow configuration file (specflow.json) Your must append RaaLabs.Edge.Testing to the list of external assemblies in specflow.json. Example: { \"allowDebugGeneratedFiles\": true, \"stepAssemblies\": [ { \"assembly\": \"RaaLabs.Edge.Testing\" } ] } Assembly registration For component scanning to work, you need to specify the assembly .dll file where the classes for the test is located. This can easily be done by adding the following SpecFlow \"hook\" class to your test project: [Binding] class AssemblyRegistration { private readonly ComponentAssemblies _assemblies; public AssemblyRegistration(ComponentAssemblies assemblies) { _assemblies = assemblies; } [BeforeScenario] private void RegisterAssembly() { _assemblies.Add(GetType().Assembly); } } TypeMapping You need to provide string representations of your handler and event classes, in the TypeMapping dictionary. This should be done in a SpecFlow \"Hook\", like this: [Binding] public sealed class TypeMapperProvider { private readonly TypeMapping _typeMapping; public TypeMapperProvider(TypeMapping typeMapping) { _typeMapping = typeMapping; } [BeforeScenario] public void SetupTypes() { _typeMapping.Add(\"MyIncomingEventHandler\", typeof(MyIncomingEventHandler)); _typeMapping.Add(\"IncomingEvent\", typeof(Events.IncomingEvent)); _typeMapping.Add(\"OutgoingEvent\", typeof(Events.OutgoingEvent)); } } EventInstanceFactory All events that will be produced needs to have an IEventInstanceFactory associated with it. This class will provide functionality to create instances of the given event type from table rows in the SpecFlow feature file. You need to create a class implementing IEventInstanceFactory<T> , with T being the type of your incoming event. The Edge.Testing project will automatically register all classes implementing IEventInstanceFactory<> . Example: class IncomingEventInstanceFactory : IEventInstanceFactory<IncomingEvent> { public IncomingEvent FromTableRow(TableRow row) { var value = float.Parse(row[\"Value\"]); return new IncomingEvent { Value = value }; } } EventVerifier To verify that the events produced by a handler class are correctly produced, the outgoing events needs to have an IProducedEventVerifier associated with it. This class wil provide functionality to verify each produced event with rows from a table in the SpecFlow feature file. You need to create a class implementing IProducedEventVerifier<T> , with T being the type of your outgoing event. The Edge.Testing project will automatically register all classes implementing IProducedEventVerifier<> . Example: class OutgoingEventVerifier : IProducedEventVerifier<OutgoingEvent> { public void VerifyFromTableRow(OutgoingEvent @event, TableRow row) { @event.value.Should().BeApproximately(float.Parse(row[\"Value\"]), 0.0001f); } }"
  },
  "articles/README.html": {
    "href": "articles/README.html",
    "title": "RaaLabs Edge Framework | DocFX Material",
    "keywords": "RaaLabs Edge Framework About This framework is created to ease the building of applications in the RaaLabs ecosystem. It focuses heavily on application execution mainly through propagation of asynchronous events, and provides an event propagation backbone as a central module. It is designed for Dependency Injection using Autofac modules. Modules Core This module contains the bare minimum of requirements that an application will need: Application builder with type registration for Autofac context Application class, supporting handlers and async tasks Logging using Serilog EventHandling This module provides the application with an event handling backbone. Can be thought of as a replacement for Kafka for communication between application components, but with a \"push\" configuration rather than a \"pull\" configuration. Configuration This module allows the application to load configuration files upon type activation. EdgeHub This module bridges the communication with EdgeHub using the EventHandling module."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to Raa Labs Edge Framework Documentation | DocFX Material",
    "keywords": "Welcome to Raa Labs Edge Framework Documentation About Raa Labs Raa Labs provides vessel data as a service. Our core offering, RaaEdge, is a an infrastructure solution to collect operational vessel data. RaaEdge is a service where we ensure your required digital capabilities are taken care of. Connecting to “anything” onboard the vessel and allowing you to access that data and use it in any way you want, with any other partner you might have, to solve your use cases and generate value for you. Your digital ambitions are within reach. Our philosophy is Open, we want you to have the capability and decide how to best leverage data from your vessels. Our purpose is to enable you to take the next step towards transforming your organization with data. We make it available, you have the flexibility. Raa Edge is a solution creating the fundament for your digital capability, making it possible for you to work with data in a scalable and structured way. Coming from maritime - we know the challenges of operating infrastructure onboard vessels and with our domain expertise we monitor and identify issues when they arise, making sure your digital capability remains robust, despite continuously changing conditions as the vessels sails around the world. Refer to our website to get to know more: www.raalabs.com The Raa Labs Edge Framework The Raa Labs Edge Framework is a fundamental part of RaaEdge, containing shared components of applications within the RaaEdge solution. The framework is aimed at simplifiying the creation of edge modules and applications within the Raa Labs ecosystem. This documentation is aimed at developers within Raa Labs working on edge modules. Found and issue with this documentation? Open an issue!"
  }
}